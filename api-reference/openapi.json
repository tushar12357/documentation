{
  "openapi": "3.1.0",
  "info": {
    "title": "OpenAPI Plant Store",
    "description": "A sample API that uses a plant store as an example to demonstrate features in the OpenAPI specification",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://app.closerx.ai/api"
    }
    ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/auth/login/":{
     "post": {
        "description": "Allows User to Log In the system",
        "security":[],
        "requestBody": {
          "description": "Login Credentials",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Login response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/request-email/":{
     "post": {
        "description": "Allows User to Log In the system",
        "security":[],
        "requestBody": {
          "description": "Login Credentials",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Login response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForgotPasswordResponse"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout/": {
      "post": {
        "description": "Allows User to Log Out of the system",
        "requestBody": {
          "description": "Access token for logout",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Logout response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/password-reset/{uidb64}/{token}/": {
      "get": {
        "description": "Verifies the password reset token for a user",
        "security": [],
        "parameters": [
          {
            "name": "uidb64",
            "in": "path",
            "description": "Base64 encoded user ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "path",
            "description": "Password reset token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Token verification response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordResetVerifyResponse"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/password-reset-complete/": {
      "post": {
        "description": "Allows User to reset their password using a valid token",
        "security": [],
        "requestBody": {
          "description": "User ID, token, and new password for password reset",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetCompleteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password reset response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordResetCompleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/token/refresh/": {
      "post": {
        "description": "Allows User to refresh their access token",
        "security": [],
        "requestBody": {
          "description": "Refresh token",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Token refresh response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dashboard_top_cards_data_v2/": {
      "get": {
        "description": "Returns the call success rate,average response time,ai accurary rate and total balance",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required":true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard data response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardData"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dashboard_campaign_list/": {
      "get": {
        "description": "Returns the campaign distribution",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required":true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard data response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardCampaignList"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dashboard_data_v2/": {
      "get": {
        "description": "Returns the call success rate,average response time,ai accurary rate and total balance",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required":true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard data response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardMonthlyData"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/campaign-results/": {
      "get": {
        "description": "Returns the campaign distribution",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required":true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard data response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardCampaignResult"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/quick-campaign-results/": {
      "get": {
        "description": "Returns the campaign distribution",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required":true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard data response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardQuickCampaignResult"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/update-whitelabel/": {
      "get": {
        "description": "Retrieves the whitelabel domain configuration for the tenant",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Whitelabel domain configuration response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhitelabelResponse"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the whitelabel domain configuration for the tenant",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Whitelabel configuration data to update",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/WhitelabelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Whitelabel domain update response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhitelabelResponse"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/verify-whitelabel/": {
      "post": {
        "description": "Verifies the whitelabel domain configuration for the tenant",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Domain and verification step for whitelabel verification",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyWhitelabelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Whitelabel domain verification response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyWhitelabelResponse"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/change/agency/credit_price/": {
      "get": {
        "description": "Retrieves the credit price for the agency",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Credit price response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditPriceResponse"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Updates the credit price for the agency",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Credit price to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditPriceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Credit price update response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditPriceResponse"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/create-stripe-product/": {
      "post": {
        "description": "Creates a new Stripe product and associated price",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Product details for creating a Stripe product",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStripeProductRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Stripe product creation response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateStripeProductResponse"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/list-stripe-products/": {
      "get": {
        "description": "Retrieves a list of Stripe products and their associated prices",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stripe products list response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListStripeProductsResponse"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/create-subscription-link/": {
      "post": {
        "description": "Creates a Stripe payment link for a subscription",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Price ID for creating the subscription payment link",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriptionLinkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Subscription payment link creation response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSubscriptionLinkResponse"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/delete-stripe-products/{product_id}/": {
      "delete": {
        "description": "Hides or deactivates a Stripe product",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "product_id",
            "in": "path",
            "description": "Unique identifier for the Stripe product to be hidden",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stripe product hide response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteStripeProductResponse"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/your-credit-plans/": {
      "get": {
        "description": "Retrieves a list of available credit plans for the tenant",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Credit plans list response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditPlansResponse"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new credit plan for the tenant",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details for creating a new credit plan",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCreditPlanRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Credit plan creation response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCreditPlanResponse"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/your-credit-plans/{id}/": {
      "delete": {
        "description": "Deletes a specific credit plan by its ID",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the credit plan to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Credit plan deleted successfully, no content returned"
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/purchased-themes/": {
      "get": {
        "description": "Retrieves a list of purchased themes for the tenant",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Purchased themes list response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchasedThemesResponse"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/create-checkout-session-theme/": {
      "post": {
        "description": "Creates a Stripe checkout session for purchasing a theme",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Checkout session creation response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCheckoutSessionThemeResponse"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/aicallagent-list/": {
      "get": {
        "description": "Retrieves a paginated list of AI call agents with optional search and sorting",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term to filter agents",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Field to sort by (prefix with '-' for descending order)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "-updated_at"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AI call agents list response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AICallAgentListResponse"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/agent/create/": {
      "post": {
        "description": "Creates a new AI call agent with default settings",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AI call agent creation response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAgentResponse"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
     "/llm/update/{llm_id}/": {
      "get": {
        "description": "Retrieves the configuration of an existing LLM by its ID",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "llm_id",
            "in": "path",
            "description": "Unique identifier for the LLM to retrieve",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LLM retrieval response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateLLMResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Updates the configuration of an existing LLM by its ID",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "llm_id",
            "in": "path",
            "description": "Unique identifier for the LLM to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "LLM configuration details to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLLMRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "LLM update response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateLLMResponse"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/agent/update/{agent_id}/": {
      "patch": {
        "description": "Updates the configuration of an existing AI call agent by its ID",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agent_id",
            "in": "path",
            "description": "Unique identifier for the AI call agent to be updated",
            "required": true,
            "schema": {
              "type": "string",
              "example": "16b980523634a6dc504898cda492e939"
            }
          }
        ],
        "requestBody": {
          "description": "Configuration details to update for the AI call agent",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAgentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "AI call agent update response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAgentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieves the configuration of an existing AI call agent by its ID",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agent_id",
            "in": "path",
            "description": "Unique identifier for the AI call agent to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "example": "16b980523634a6dc504898cda492e939"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AI call agent retrieval response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAgentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Deletes an existing AI call agent by its ID",
        "parameters": [
          {
            "name": "Company-Name",
            "in": "header",
            "description": "The name of the schema to be used for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agent_id",
            "in": "path",
            "description": "Unique identifier for the AI call agent to delete",
            "required": true,
            "schema": {
              "type": "string",
              "example": "16b980523634a6dc504898cda492e939"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AI call agent deletion response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates whether the deletion was successful",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Message describing the result of the deletion",
                      "example": "deleted success"
                    }
                  },
                  "required": ["success", "message"]
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },

    "/v2/camp-quickcamp/": {
  "get": {
    "description": "Fetches call campaign data, including status, agent details, calling numbers, and campaign performance metrics.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "description": "The name of the schema to be used for the request",
        "required": true,
        "schema": { "type": "string" }
      },
      {
        "name": "search",
        "in": "query",
        "description": "The search term used to filter results",
        "required": false,
        "schema": { "type": "string" }
      },
      {
        "name": "status",
        "in": "query",
        "description": "The status of the campaign (e.g., running, paused, completed)",
        "required": false,
        "schema": { 
          "type": "string",
          "enum": ["running", "paused", "completed"]
        }
      },
      {
        "name": "direction",
        "in": "query",
        "description": "The direction of the call (e.g., Outbound or Inbound)",
        "required": false,
        "schema": { 
          "type": "string",
          "enum": ["Outbound", "Inbound"]
        }
      },
      {
        "name": "sort_by",
        "in": "query",
        "description": "The field by which the results should be sorted (e.g., name, date)",
        "required": false,
        "schema": { "type": "string" }
      },
      {
        "name": "page",
        "in": "query",
        "description": "The page number to retrieve results from (for pagination)",
        "required": false,
        "schema": { "type": "integer" }
      }
    ],
    "responses": {
      "200": {
        "description": "Get Quick Campaign data response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CampaignData"
            }
          }
        }
      },
      "400": {
        "description": "Unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
},
    "/campaign/": {
    "post": {
      "summary": "Create a new call campaign",
      "description": "Creates a new call campaign, including key campaign details such as Campaign Name, Selected AI Agent, Call Direction, Selected Phone Number, Number Rotation settings, Campaign Budget (in minutes), and Scheduling options.",
      "parameters": [
        {
          "name": "Company-Name",
          "in": "header",
          "description": "The name of the schema to be used for the request",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateCampaignRequest"
            }   
          }
        }
      },
      "responses": {
        "200": {
          "description": "Campaign created successfully",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCampaign"
              }
            }
          }
        },
        "400": {
          "description": "Unexpected error",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        }
      }
    }
  },
    "/quick_campaign/": {
  "post": {
    "summary": "Create a new Quick Campaign",
    "description": "Creates a new quick call campaign, including key campaign details such as Campaign Name, Selected AI Agent, Selected Phone Number, and Enable Number Rotation settings.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "description": "The name of the schema to be used for the request",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/CreateQuickCampaignRequest"
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Quick Campaign created successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateQuickCampaign"
            }
          }
        }
      },
      "400": {
        "description": "Invalid request or missing data",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
},
    "/v2/camp-quickcamp/update/{campaign_id}/": {
  "patch": {
    "summary": "Edit Campaign or Perform Status Actions",
    "description": "This endpoint allows editing campaign details like name, agent, budget, calling number, as well as performing actions like pause, resume, or complete the campaign.",
    "parameters": [
      {
        "name": "campaign_id",
        "in": "path",
        "required": true,
        "description": "The ID of the campaign to be updated",
        "schema": {
          "type": "string"
        }
      },
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "The name of the schema to be used for the request",
        "schema": {
          "type": "string"
        }
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/UpdateCampaignRequest"
          },
          "examples": {
            "EditCampaign": {
  "summary": "Edit campaign details",
  "value": {
    "name": "string",                   
    "new_agent": "number",               
    "calling_number": "string",       
    "total_bugget": "number",         
    "priority": "number",             
    "status": "string"   
  }
},
            "PauseCampaign": {
              "summary": "Pause campaign",
              "value": {
                "status": "paused"
              }
            }
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Campaign updated successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateCampaignResponse"
            },
            "examples": {
              "EditCampaignResponse": {
                "summary": "Edit campaign response",
                "value": {
                  "success": true,
                  "message": "Campaign updated successfully",
                  "data": {
                    "campaign": {
  "id": "string",
  "name": "string",
  "direction": "string",
  "agent": "null | string",
  "new_agent": "number",
  "contact_list": "null | string",
  "knowledge_base": "null | string",
  "calling_number": "string",
  "start_date": "null | string",
  "start_time": "null | string",
  "end_time": "null | string",
  "total_bugget": "number",
  "bugget_left": "string",
  "saturday": "boolean",
  "sunday": "boolean",
  "status": "string",
  "priority": "number",
  "created_at": "string",
  "updated_at": "string"
}

                  }
                }
              }
            }
          }
        }
      },
      "400": {
        "description": "Invalid request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
    },
    "/v2/graph/daily-campaign-results/{campaign_id}/": {
  "get": {
    "summary": "Get daily campaign result data",
    "description": "Returns hourly data for credit deductions and campaign results for a given campaign on a specific date.",
    "parameters": [
      {
        "name": "campaign_id",
        "in": "path",
        "required": true,
        "description": "Unique ID of the campaign (e.g., campc005bf8a)",
        "schema": {
          "type": "string"
        }
      },
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "The name of the schema to be used for the request",
        "schema": {
          "type": "string"
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Hourly analytics data of the campaign for a specific day",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DailyCampaignGraph"
            }
          }
        }
      },
      "400": {
        "description": "Invalid input or unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "404": {
        "description": "Campaign not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
    },
"/v2/campaign-analytics/{campaign_id}/": {
  "get": {
    "summary": "Get campaign analytics by date",
    "description": "Returns paginated campaign analytics for a specific campaign and date range.",
    "parameters": [
      {
        "name": "campaign_id",
        "in": "path",
        "required": true,
        "description": "Unique campaign ID (e.g., campc005bf8a)",
        "schema": { "type": "string" }
      },
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "The name of the schema to be used for the request",
        "schema": { "type": "string" }
      },
      {
        "name": "page",
        "in": "query",
        "required": false,
        "schema": { "type": "integer" },
        "description": "Page number for pagination"
      },
      {
        "name": "sort_by",
        "in": "query",
        "required": false,
        "schema": { "type": "string" },
        "description": "Sort the results by a specific field"
      },
      {
        "name": "search",
        "in": "query",
        "required": false,
        "schema": { "type": "string" },
        "description": "Search term for filtering"
      },
      {
        "name": "outcome",
        "in": "query",
        "required": false,
        "schema": { "type": "string" },
        "description": "Filter by outcome of the campaign"
      },
      {
        "name": "date",
        "in": "query",
        "required": false,
        "schema": { "type": "string", "format": "date" },
        "description": "Specific date for which data is required"
      },
      {
        "name": "from_date",
        "in": "query",
        "required": false,
        "schema": { "type": "string", "format": "date" },
        "description": "Start date for range filtering"
      },
      {
        "name": "to_date",
        "in": "query",
        "required": false,
        "schema": { "type": "string", "format": "date" },
        "description": "End date for range filtering"
      }
    ],
    "responses": {
      "200": {
        "description": "Campaign analytics data response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CampaignAnalytics"
            }
          }
        }
      },
      "400": {
        "description": "Invalid request or input",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" }
          }
        }
      },
      "404": {
        "description": "Campaign not found"
      }
    }
  }
},
"/v2/export/campaign/{campaign_id}/": {
  "get": {
    "summary": "Export campaign data as downloadable file",
    "description": "Exports campaign data (e.g. analytics or logs) as a downloadable ZIP or Excel file.",
    "parameters": [
      {
        "name": "campaign_id",
        "in": "path",
        "required": true,
        "description": "The unique ID of the campaign (e.g., quickcamp2062236c)",
        "schema": { "type": "string" }
      },
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "The schema name for multi-tenancy (company-wise DB separation)",
        "schema": { "type": "string" }
      },
      {
        "name": "page",
        "in": "query",
        "required": false,
        "schema": { "type": "integer" }
      },
      {
        "name": "sort_by",
        "in": "query",
        "required": false,
        "schema": { "type": "string" }
      },
      {
        "name": "search",
        "in": "query",
        "required": false,
        "schema": { "type": "string" }
      },
      {
        "name": "outcome",
        "in": "query",
        "required": false,
        "schema": { "type": "string" }
      },
      {
        "name": "date",
        "in": "query",
        "required": false,
        "schema": { "type": "string", "format": "date" }
      },
      {
        "name": "from_date",
        "in": "query",
        "required": false,
        "schema": { "type": "string", "format": "date" }
      },
      {
        "name": "to_date",
        "in": "query",
        "required": false,
        "schema": { "type": "string", "format": "date" }
      }
    ],
    "responses": {
      "200": {
        "description": "Downloadable campaign export file (ZIP, CSV, or Excel)",
        "content": {
          "application/zip": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "application/octet-stream": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      },
      "400": {
        "description": "Invalid request parameters",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" }
          }
        }
      },
      "404": {
        "description": "Campaign not found"
      }
    }
  }
},
"/v2/campaign-final-analysis/{campaign_id}/": {
  "get": {
    "summary": "Get final campaign analysis by campaign ID",
    "description": "Returns the final analysis data for a specific campaign by its campaign ID.",
    "parameters": [
      {
        "name": "campaign_id",
        "in": "path",
        "required": true,
        "description": "Unique campaign ID (e.g., quickcamp6cd8c4ce)",
        "schema": { "type": "string" }
      },
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "The name of the schema to be used for the request",
        "schema": { "type": "string" }
      }
    ],
    "responses": {
      "200": {
        "description": "Final campaign analysis data response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CampaignFinalAnalysis"
            }
          }
        }
      },
      "400": {
        "description": "Invalid request or input",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" }
          }
        }
      },
      "404": {
        "description": "Campaign not found"
      }
    }
  }
},
"/scheduled-callbacks/agency/{company_name}/": {
  "get": {
    "summary": "Retrieve scheduled callbacks for the specified agency",
    "description": "Fetches the list of scheduled callbacks for the agency 'voizerfreeaccount'.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "The schema name for multi-tenancy (company-wise DB separation)",
        "schema": { "type": "string" }
      }
    ],
    "responses": {
      "200": {
        "description": "Successfully retrieved scheduled callbacks",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CallbackVoizerFreeAccount"
              }
            }
          }
        }
      },
      "400": {
        "description": "Invalid request parameters",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" }
          }
        }
      },
      "404": {
        "description": "No scheduled callbacks found for the given agency"
      }
    }
  }
},
"/v2/scheduled-callbacks/agency/": {
  "get": {
    "summary": "Retrieve scheduled callbacks for all agencies",
    "description": "Fetches the list of scheduled callbacks for all agencies.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "The schema name for multi-tenancy (company-wise DB separation)",
        "schema": { "type": "string" }
      }
    ],
    "responses": {
      "200": {
        "description": "Successfully retrieved scheduled callbacks",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CallbackHistory"
              }
            }
          }
        }
      },
      "400": {
        "description": "Invalid request parameters",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" }
          }
        }
      },
      "404": {
        "description": "No scheduled callbacks found for the agencies"
      }
    }
  }
},
"/v2/contact/": {
  "get": {
    "summary": "Retrieve contact list with optional search and pagination",
    "description": "Fetches a paginated list of contacts. You can filter the results using a search query.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "The schema name for multi-tenancy (company-wise DB separation)",
        "schema": { "type": "string" }
      },
      {
        "name": "page",
        "in": "query",
        "required": false,
        "description": "Page number for pagination",
        "schema": { "type": "integer", "example": 1 }
      },
      {
        "name": "search",
        "in": "query",
        "required": false,
        "description": "Search term to filter contacts by name, number, or other fields",
        "schema": { "type": "string", "example": "john" }
      }
    ],
    "responses": {
      "200": {
        "description": "Successfully retrieved contact list",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ContactList"
            }
          }
        }
      },
      "400": {
        "description": "Invalid request parameters",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" }
          }
        }
      },
      "404": {
        "description": "No contacts found"
      }
    }
  },
  "post": {
    "summary": "Create a new contact",
    "description": "Creates a new contact with personal, company, and tag information.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "The schema name for multi-tenancy",
        "schema": { "type": "string" }
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/CreateContactRequest"
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Contact created successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateContactResponse"
            }
          }
        }
      },
      "400": {
        "description": "Invalid input or missing fields",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" }
          }
        }
      }
    }
  }
},
"/v2/tags/": {
  "get": {
    "summary": "Retrieve list of tags",
    "description": "Fetches a list of all available tags in the system. This endpoint returns all tags without requiring any query parameters.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "The schema name for multi-tenancy (company-wise DB separation)",
        "schema": { "type": "string" }
      }
    ],
    "responses": {
      "200": {
        "description": "Successfully retrieved list of tags",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Tag"
              }
            }
          }
        }
      },
      "400": {
        "description": "Invalid request or missing headers",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "404": {
        "description": "No tags found"
      }
    }
  }
},
"/v2/contact-detail/{id}/": {
  "patch": {
    "summary": "Update a contact",
    "description": "Updates complete details of a specific contact by its unique ID.",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "Unique ID of the contact (e.g., 4465)",
        "schema": { "type": "integer" }
      },
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "The schema name for multi-tenancy (company-wise DB separation)",
        "schema": { "type": "string" }
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/EditContactRequest"
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Successfully updated contact details",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EditContact"
            }
          }
        }
      },
      "400": {
        "description": "Invalid request or missing headers",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" }
          }
        }
      },
      "404": {
        "description": "Contact not found"
      }
    }
  },

  "delete": {
    "summary": "Delete a contact",
    "description": "Deletes a contact by its unique ID.",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "Unique ID of the contact (e.g., 4465)",
        "schema": { "type": "integer" }
      },
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "The schema name for multi-tenancy (company-wise DB separation)",
        "schema": { "type": "string" }
      }
    ],
    "responses": {
      "204": {
        "description": "Contact successfully deleted (no content)"
      },
      "400": {
        "description": "Invalid request or missing headers",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Error" }
          }
        }
      },
      "404": {
        "description": "Contact not found"
      }
    }
  }
},
"/v2/contact-profile/": {
  "get": {
    "summary": "Fetch contact profile by phone number",
    "description": "Retrieves a contact's associated campaign and quick campaign results based on their contact number.",
    "parameters": [
      {
        "name": "contact_number",
        "in": "query",
        "required": true,
        "description": "Contact number in E.164 format (e.g., +919779673180)",
        "schema": {
          "type": "string"
        }
      },
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Successfully fetched contact profile results",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ContactProfileResponse"
            }
          }
        }
      },
      "400": {
        "description": "Invalid contact number or missing header",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
},
  "/v2/contact-delete-bulk/": {
    "delete": {
      "summary": "Bulk delete contacts",
      "description": "Deletes contacts in bulk using contact IDs or tag filters.",
      "parameters": [
        {
          "name": "ids",
          "in": "query",
          "required": false,
          "description": "Comma-separated list of contact IDs",
          "schema": {
            "type": "string",
            "example": "4501,4499,4500"
          }
        },
        {
          "name": "tags",
          "in": "query",
          "required": false,
          "description": "Comma-separated list of tag IDs",
          "schema": {
            "type": "string",
            "example": "12,15"
          }
        },
        {
          "name": "Company-Name",
          "in": "header",
          "required": true,
          "description": "Schema name for multi-tenancy",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Contacts deleted successfully",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkDeleteContactResponse"
              }
            }
          }
        },
        "400": {
          "description": "Invalid request or missing parameters",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Error" }
            }
          }
        }
      }
    }
  },
  "/v2/bulk/create/contacts/": {
  "post": {
    "summary": "Bulk create contacts",
    "description": "Creates contacts in bulk with associated tags. Accepts an array of contact objects and a list of tags.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "contact": {
                "type": "array",
                "description": "List of contacts to be created",
                "items": {
                  "type": "object",
                  "properties": {
                    "phone": {
                      "type": "string",
                      "example": "+9821985448"
                    }
                  },
                  "required": ["phone"]
                }
              },
              "tags": {
                "type": "array",
                "description": "Tags to associate with contacts",
                "items": {
                  "type": "string",
                  "example": "Test campaign"
                }
              }
            },
            "required": ["contact", "tags"]
          },
          "example": {
            "contact": [
              { "phone": "+9821985448" }
            ],
            "tags": ["Test campaign"]
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Bulk contact creation started successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BulkCreateContactResponse"
            }
          }
        }
      },
      "400": {
        "description": "Invalid request or missing data",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
},
"/v2/importcrm/": {
  "get": {
    "summary": "Start CRM Import",
    "description": "Initiates the CRM import task and returns a task ID and status message.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "responses": {
      "200": {
        "description": "CRM import task initiated",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ImportCRMResponse"
            }
          }
        }
      },
      "400": {
        "description": "Invalid request or missing parameters",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
},
"/v2/salesforce/contacts/": {
  "get": {
    "summary": "Import Salesforce Contacts",
    "description": "Fetches and imports contacts from the connected Salesforce account.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Salesforce contacts imported successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SalesforceContactImportResponse"
            }
          }
        }
      },
      "400": {
        "description": "Invalid request or missing configuration",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
},
"/v2/send-contacts-to-crms/": {
  "post": {
    "summary": "Send Contacts to CRMs",
    "description": "Triggers the export of contacts from Salesforce to another CRM (e.g., GHL).",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "requestBody": {
  "required": true,
  "content": {
    "application/json": {
      "schema": {
        "type": "object",
        "properties": {
          "is_salesforce_to_ghl_task": {
            "type": "boolean",
            "description": "Flag to start the Salesforce to GHL export task",
            "example": true
          },
          "ghl_to_salesforce": {
            "type": "boolean",
            "description": "Flag to start the GHL to Salesforce export task",
            "example": false
          }
        },
        "required": ["is_salesforce_to_ghl_task", "is_ghl_to_salesforce"]
      },
      "example": {
        "is_salesforce_to_ghl_task": true,
        "is_ghl_to_salesforce": true
      }
    }
  }
},
    "responses": {
      "200": {
        "description": "Export task started successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SendContactsToCRMsResponse"
            }
          }
        }
      },
      "400": {
        "description": "Invalid request or missing data",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
},
"/twilio/user/number/": {
  "post": {
    "summary": "Fetch Twilio Phone Numbers",
    "description": "Retrieves a list of phone numbers associated with the provided Twilio SID and Auth Token.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/TwilioUserNumberRequest"
          }

        }
      }
    },
    "responses": {
      "200": {
        "description": "Twilio numbers fetched successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TwilioUserNumberResponse"
            }
          }
        }
      },
      "400": {
        "description": "Invalid credentials or request body",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
},
"/twilio/new/number/": {
  "post": {
    "summary": "Search New Twilio Phone Numbers",
    "description": "Retrieves available Twilio numbers based on search parameters like country, number slice, and slice filter.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/TwilioNewNumberRequest"
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Available Twilio numbers fetched successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TwilioNewNumberResponse"
            }
          }
        }
      },
      "400": {
        "description": "Invalid request or credentials",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
},
"/twilio/buy/number/": {
  "post": {
    "summary": "Twilio Buy Number",
    "description": "Buys a Twilio number using provided credentials, phone number and optional friendly name.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/TwilioBuyNumberRequest"
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Contact number added successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TwilioBuyNumberResponse"
            },
            "example": {
              "success": true,
              "message": "contact number added",
              "data": {}
            }
          }
        }
      },
      "400": {
        "description": "Invalid SID, token, or phone number",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
},
"/agency/twilio/register/": {
  "post": {
    "summary": "Twilio Register",
    "description": "Registers Twilio credentials (SID and Token) for the agency account.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/TwilioRegisterRequest"
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Twilio SID and token updated successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TwilioRegisterResponse"
            },
            "example": {
              "success": true,
              "message": "twilio sid and twilio token updated sucessfully",
              "data": {}
            }
          }
        }
      },
      "400": {
        "description": "Invalid Twilio SID or Token",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  },

  "get": {
    "summary": "Get Twilio Credentials",
    "description": "Fetches the Twilio SID and token for the specified company schema.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Twilio credentials fetched successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TwilioRegisterGetResponse"
            },
            "example": {
              "success": true,
              "message": "twilio sid and twilio token updated"

            }
          }
        }
      },
      "400": {
        "description": "Missing or invalid company schema",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
},
"/v2/twilio/post/callerids/": {
  "post": {
    "summary": "Telnyx Buy Caller ID",
    "description": "Registers a new caller ID number along with optional SIP credentials and friendly name.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/TelnyxBuyCallerIDRequest"
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Caller ID saved successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TelnyxBuyCallerIDResponse"
            },
            "example": {
              "success": true,
              "message": "Caller ID saved successfully"

            }
          }
        }
      },
      "400": {
        "description": "Invalid input or missing fields",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
},

"/v2/twilio/fetch/callerids/": {
  "post": {
    "summary": "Fetch Twilio Caller IDs",
    "description": "Fetches existing verified caller IDs from Twilio along with their friendly names and SIDs.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/TwilioFetchCallerIDsRequest"
          }

        }
      }
    },
    "responses": {
      "200": {
        "description": "Caller IDs retrieved successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TwilioFetchCallerIDsResponse"
            }
          }
        }
      },
      "400": {
        "description": "Invalid credentials or request data",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
},
"/twilio/contact/": {
  "get": {
    "summary": "Get Twilio Contact Numbers",
    "description": "Retrieves a list of Twilio contact numbers with additional metadata such as nickname and status.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Twilio contact numbers retrieved successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TwilioContactListResponse"
            }
          }
        }
      },
      "400": {
        "description": "Invalid request or missing parameters",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
},
"/start-verification/": {
  "post": {
    "summary": "Start Phone Number Verification",
    "description": "Initiates a verification process for a phone number using Twilio's caller ID validation.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/StartVerificationRequest"
          },
          "example": {
  "phone_number": "string",
  "friendly_name": "string",
  "sid": "string",
  "auth": "string"
}

        }
      }
    },
    "responses": {
      "200": {
        "description": "Verification initiated successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/StartVerificationResponse"
            }
          }
        }
      },
      "400": {
        "description": "Invalid request or Twilio credentials",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
},
"/verification-status/": {
  "get": {
    "summary": "Get Verification Status",
    "description": "Retrieves the verification status for a specific phone number based on Twilio caller ID validation.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      },
      {
        "name": "phone_number",
        "in": "query",
        "required": true,
        "description": "The phone number to check verification status for (URL encoded)",
        "schema": {
          "type": "string",
          "example": "+919999728776"
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Verification status retrieved successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/VerificationStatusResponse"
            }
          }
        }
      },
      "400": {
        "description": "Missing or invalid phone number",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
},
"/twilio/contact/{id}/": {
  "delete": {
    "summary": "Delete Contact",
    "description": "Deletes a Twilio contact based on the provided contact ID.",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "Unique identifier of the Twilio contact to be deleted",
        "schema": {
          "type": "integer",
          "example": 60
        }
      },
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Contact deleted successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DeleteTwilioContactResponse"
            }
          }
        }
      },
      "404": {
        "description": "Contact not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "400": {
        "description": "Invalid contact ID",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
},
"/v2/register/telynx/": {
  "post": {
    "summary": "Telnyx Register",
    "description": "Registers the Telnyx API key for the current company/tenant.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/TelnyxRegisterRequest"
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Telnyx API key registered successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TelnyxRegisterResponse"
            },
            "example": {
              "success": false,
              "errors": [],
              "response": "voizerfreeaccount",
              "message": "Telnyx API key updated successfully"
            }
          }
        }
      },
      "400": {
        "description": "Invalid or missing Telnyx API key",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  },
  "get": {
  "summary": "Get Telnyx Registration Info",
  "description": "Fetches the Telnyx API key and visibility settings for the current company/tenant.",
  "parameters": [
    {
      "name": "Company-Name",
      "in": "header",
      "required": true,
      "description": "Schema name for multi-tenancy",
      "schema": {
        "type": "string"
      }
    }
  ],
  "responses": {
    "200": {
      "description": "Telnyx API key info retrieved successfully",
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/TelnyxRegisterGetResponse"
          }
        }
      }
    },
    "400": {
      "description": "Missing or invalid Company-Name header",
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/Error"
          }
        }
      }
    }
  }
}

},

"/v2/register/telynx/number/": {
  "post": {
    "summary": "Telnyx Register Number",
    "description": "Registers a new number with Telnyx using the given phone number, country code, and friendly name.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/TelnyxRegisterNumberRequest"
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Number registered successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TelnyxRegisterNumberResponse"
            }
          }
        }
      },
      "400": {
        "description": "Failed to register number",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TelnyxRegisterNumberError"
            }
          }
        }
      }
    }
  }
},
"/v2/telnyx/numbers-combined/": {
  "get": {
    "summary": "Telnyx Purchased Number List (Combined)",
    "description": "Retrieves both purchased and available Telnyx numbers based on filters like country code and number slice options.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      },
      {
        "name": "country_code",
        "in": "query",
        "required": true,
        "description": "Country code for filtering phone numbers",
        "schema": {
          "type": "string",
          "example": "US"
        }
      },
      {
        "name": "number_slice",
        "in": "query",
        "required": false,
        "description": "Custom substring used to match numbers (e.g. area code or prefix)",
        "schema": {
          "type": "string",
          "example": "21"
        }
      },
      {
        "name": "number_slice_filter",
        "in": "query",
        "required": false,
        "description": "Filter type used for the number slice (e.g. 'first_part' or 'last_part')",
        "schema": {
          "type": "string",
          "enum": ["first_part", "last_part"],
          "example": "first_part"
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Purchased and available Telnyx numbers retrieved successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TelnyxCombinedNumbersResponse"
            }
          }
        }
      },
      "400": {
        "description": "Invalid query or country code",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
},
"/v2/add/contact/": {
  "post": {
    "summary": "Custom Add Contact",
    "description": "Adds a new custom contact with SIP trunk credentials and other optional fields.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/CustomAddContactRequest"
          },
          "example": {
  "phone_number": "string",
  "termination_uri": "string",
  "sip_trunk_auth_username": "string",
  "sip_trunk_auth_password": "string",
  "nickname": "string",
  "source_of_origin": "string"
}

        }
      }
    },
    "responses": {
      "200": {
        "description": "Contact created successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CustomAddContactResponse"
            },
            "example": {
              "success": true,
              "message": "contact created",
              "data": {
                "pk": "integer",
  "phone_number": "string",
  "termination_uri": "string",
  "sip_trunk_auth_username": "string",
  "sip_trunk_auth_password": "string",
  "nickname": "string",
  "source_of_origin": "string",
  "phone_number_sid": "string | null",
  "verification_status": "string | null",
  "in_used_by_agent": "string",
  "is_auto_buyed": "boolean"
              }
            }
          }
        }
      },
      "400": {
        "description": "Invalid contact data or schema missing",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
},
"/ghl/connect/user/": {
  "post": {
    "summary": "Lead Connect User",
    "description": "Initiates the connection process to GHL (Go High Level) using OAuth `code` and `state` values returned after user authorization.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/GHLConnectUserRequest"
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "GHL connection successful",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GHLConnectUserResponse"
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized or invalid token",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GHLUnauthorizedError"
            }
          }
        }
      }
    }
  }
},
"/agency/api_key/": {
  "get": {
    "summary": "Fetch GHL Agency API Key",
    "description": "Retrieves the GHL agency API key associated with the authenticated account.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Agency API key retrieved successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AgencyAPIKeyResponse"
            }
          }
        }
      },
      "400": {
        "description": "Missing or invalid request data",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
},
"/salesforce/callback/": {
  "post": {
    "summary": "Salesforce OAuth Callback",
    "description": "Handles the OAuth callback from Salesforce by consuming the returned `code` and `state`.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/SalesforceCallbackRequest"
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Salesforce connection successful",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SalesforceCallbackResponse"
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized or invalid code/state",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SalesforceUnauthorizedError"
            }
          }
        }
      }
    }
  }
},
"/v2/snowie/callback/": {
  "post": {
    "summary": "Snowie OAuth Callback",
    "description": "Handles the OAuth callback from Snowie by consuming the returned `code` only.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/SnowieCallbackRequest"
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Snowie connection successful",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SnowieCallbackResponse"
            }
          }
        }
      }
    }
  }
},
"/v2/webhooks/register/": {
  "post": {
    "summary": "Register Webhook",
    "description": "Registers a new webhook with the provided URL, description, agent(s), and subscribed event(s).",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/RegisterWebhookRequest"
          },
          "example": {
            "webhook_url": "https://webhook.site/abcdef123456",
            "description": "This is a test webhook to capture call start and end events.",
            "agent_ids": ["549"],
            "events_to_subscribe": ["call.started", "call.ended"]
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Webhook registered successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RegisterWebhookResponse"
            }
          }
        }
      },
      "400": {
        "description": "Invalid data or missing fields",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
},
"/v2/webhooks/{id}/": {
  "put": {
    "summary": "Webhook Edit",
    "description": "Updates an existing webhook using the provided ID with new URL, description, subscribed events, and selected agents.",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "The ID of the webhook to update",
        "schema": {
          "type": "integer",
          "example": 25
        }
      },
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/EditWebhookRequest"
          },
          "example": {
            "webhook_url": "https://webhook.site/abcdefgh123456789",
            "description": "This edited is a test webhook to capture call start and end events.",
            "agent_ids": ["570"],
            "events_to_subscribe": ["call.started", "call.ended"]
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Webhook updated successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EditWebhookResponse"
            }
          }
        }
      },
      "400": {
        "description": "Invalid webhook ID or payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "404": {
        "description": "Webhook not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  },

  "delete": {
    "summary": "Webhook Delete",
    "description": "Deletes a webhook based on the provided ID.",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "The ID of the webhook to delete",
        "schema": {
          "type": "integer",
          "example": 25
        }
      },
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Webhook deleted successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DeleteWebhookResponse"
            }
          }
        }
      },
      "404": {
        "description": "Webhook not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
},
"/v2/webhooks/": {
  "get": {
    "summary": "Get Webhook List",
    "description": "Retrieves a list of all registered webhooks along with their URLs, descriptions, subscribed events, and associated agents.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Webhook list retrieved successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetWebhookListResponse"
            }
          }
        }
      },
      "400": {
        "description": "Invalid request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
},
"/v2/active-webhook-stats/": {
  "get": {
    "summary": "Get Active Webhook Stats",
    "description": "Returns analytics for active webhooks, including total count, average response time, and total hit count.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Active webhook stats retrieved successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ActiveWebhookStatsResponse"
            }
          }
        }
      },
      "400": {
        "description": "Invalid request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
},
"/v2/list-all-agent/": {
  "get": {
    "summary": "List All Agents",
    "description": "Retrieves all configured agents with their full configuration and metadata.",
    "parameters": [
      {
        "name": "Company-Name",
        "in": "header",
        "required": true,
        "description": "Schema name for multi-tenancy",
        "schema": {
          "type": "string"
        }
      }
    ],
    "responses": {
      "200": {
        "description": "List of agents retrieved successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ListAllAgentsResponse"
            }
          }
        }
      },
      "400": {
        "description": "Invalid request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
}



































    
    









  },
  "components": {
    "schemas": {
       "Login": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "User's password"
          }
        }
      },
       "LoginResponse": {
        "type": "object",
        "required": ["success", "message", "data"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the login was successful"
          },
          "message": {
            "type": "string",
            "description": "Message describing the result of the login request"
          },
          "data": {
            "type": "object",
            "required": ["user"],
            "properties": {
              "user": {
                "type": "object",
                "required": [
                  "id",
                  "email",
                  "first_name",
                  "last_name",
                  "profile_picture",
                  "contact_number",
                  "email_verified",
                  "companies",
                  "access_token",
                  "refresh_token",
                  "is_superadmin",
                  "agent_exists",
                  "subscription_status",
                  "is_suspended",
                  "ghl_connected",
                  "term_condition_excepted",
                  "twilio_type",
                  "salesforce_connected",
                  "snowie_connected",
                  "telnyx_connected",
                  "spreadsheet_connected",
                  "login_domain"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "Unique identifier for the user"
                  },
                  "email": {
                    "type": "string",
                    "description": "User's email address"
                  },
                  "first_name": {
                    "type": "string",
                    "description": "User's first name"
                  },
                  "last_name": {
                    "type": "string",
                    "description": "User's last name"
                  },
                  "profile_picture": {
                    "type": "string",
                    "description": "URL to the user's profile picture"
                  },
                  "contact_number": {
                    "type": "string",
                    "description": "User's contact phone number"
                  },
                  "email_verified": {
                    "type": "boolean",
                    "description": "Indicates if the user's email is verified"
                  },
                  "companies": {
                    "type": "object",
                    "required": ["user_type", "company_id", "company_name", "company_name_view"],
                    "properties": {
                      "user_type": {
                        "type": "string",
                        "description": "Type of user within the company"
                      },
                      "company_id": {
                        "type": "integer",
                        "description": "Unique identifier for the company"
                      },
                      "company_name": {
                        "type": "string",
                        "description": "Name of the company"
                      },
                      "company_name_view": {
                        "type": "string",
                        "description": "Display name of the company"
                      }
                    }
                  },
                  "access_token": {
                    "type": "string",
                    "description": "Access token for authentication"
                  },
                  "refresh_token": {
                    "type": "string",
                    "description": "Refresh token for renewing access"
                  },
                  "is_superadmin": {
                    "type": "boolean",
                    "description": "Indicates if the user is a superadmin"
                  },
                  "agent_exists": {
                    "type": "boolean",
                    "description": "Indicates if an agent exists for the user"
                  },
                  "subscription_status": {
                    "type": "string",
                    "description": "Status of the user's subscription"
                  },
                  "is_suspended": {
                    "type": "boolean",
                    "description": "Indicates if the user's account is suspended"
                  },
                  "ghl_connected": {
                    "type": "boolean",
                    "description": "Indicates if GoHighLevel is connected"
                  },
                  "term_condition_excepted": {
                    "type": "boolean",
                    "description": "Indicates if terms and conditions are accepted"
                  },
                  "twilio_type": {
                    "type": "string",
                    "description": "Type of Twilio integration"
                  },
                  "salesforce_connected": {
                    "type": "boolean",
                    "description": "Indicates if Salesforce is connected"
                  },
                  "snowie_connected": {
                    "type": "boolean",
                    "description": "Indicates if Snowie is connected"
                  },
                  "telnyx_connected": {
                    "type": "boolean",
                    "description": "Indicates if Telnyx is connected"
                  },
                  "spreadsheet_connected": {
                    "type": "boolean",
                    "description": "Indicates if spreadsheet integration is connected"
                  },
                  "login_domain": {
                    "type": "string",
                    "description": "Domain used for login"
                  }
                }
              }
            }
          }
        }
      },
       "ForgotPassword": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          }
        }
      },
        "ForgotPasswordResponse": {
        "type": "object",
        "required": ["success", "status_code", "data", "message"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the request was successful"
          },
          "status_code": {
            "type": "integer",
            "description": "HTTP status code of the response"
          },
          "data": {
            "type": "object",
            "required": ["email"],
            "properties": {
              "email": {
                "type": "string",
                "format": "email",
                "description": "User's email address"
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Message describing the result of the request"
          }
        }
      },
      "LogoutRequest": {
        "type": "object",
        "required": ["access_token"],
        "properties": {
          "access_token": {
            "type": "string",
            "description": "User's access token for authentication"
          }
        }
      },
      "LogoutResponse": {
        "type": "object",
        "required": ["success", "message", "data"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the logout was successful"
          },
          "message": {
            "type": "string",
            "description": "Message describing the result of the logout request"
          },
          "data": {
            "type": "object",
            "description": "Empty object containing no additional data"
          }
        }
      },
       "PasswordResetVerifyResponse": {
        "type": "object",
        "required": ["success", "message", "data"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the token verification was successful"
          },
          "message": {
            "type": "string",
            "description": "Message describing the result of the token verification"
          },
          "data": {
            "type": "object",
            "description": "Empty object containing no additional data"
          }
        }
      },
      "PasswordResetCompleteRequest": {
        "type": "object",
        "required": ["uidb64", "token", "password"],
        "properties": {
          "uidb64": {
            "type": "string",
            "description": "Base64 encoded user ID"
          },
          "token": {
            "type": "string",
            "description": "Password reset token"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "New password for the user"
          }
        }
      },
      "PasswordResetCompleteResponse": {
        "type": "object",
        "required": ["success", "message", "data"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the password reset was successful"
          },
          "message": {
            "type": "string",
            "description": "Message describing the result of the password reset request"
          },
          "data": {
            "type": "object",
            "description": "Empty object containing no additional data"
          }
        }
      },
      "RefreshTokenRequest": {
        "type": "object",
        "required": ["refresh"],
        "properties": {
          "refresh": {
            "type": "string",
            "description": "Refresh token for obtaining a new access token"
          }
        }
      },
      "RefreshTokenResponse": {
        "type": "object",
        "required": ["access"],
        "properties": {
          "access": {
            "type": "string",
            "description": "New access token"
          }
        }
      },
      "DashboardData": {
        "type": "object",
        "required": [
          "total_outbound_calls",
          "success_rate",
          "call_duration",
          "success_rate_breakdown",
          "ai_accuracy_rate"
        ],
        "properties": {
          "total_outbound_calls": {
            "type": "integer",
            "description": "Total number of outbound calls"
          },
          "success_rate": {
            "type": "number",
            "format": "float",
            "description": "Overall success rate percentage"
          },
          "call_duration": {
            "type": "object",
            "required": [
              "overall",
              "daily",
              "weekly",
              "monthly",
              "rate_of_change_call_duration"
            ],
            "properties": {
              "overall": {
                "type": "object",
                "required": ["average", "peak", "low"],
                "properties": {
                  "average": {
                    "type": "number",
                    "format": "float",
                    "description": "Average call duration overall"
                  },
                  "peak": {
                    "type": "integer",
                    "description": "Maximum call duration overall"
                  },
                  "low": {
                    "type": "integer",
                    "description": "Minimum call duration overall"
                  }
                }
              },
              "daily": {
                "type": "object",
                "required": ["average", "peak", "low"],
                "properties": {
                  "average": {
                    "type": "number",
                    "format": "float",
                    "description": "Average call duration for the day"
                  },
                  "peak": {
                    "type": "integer",
                    "description": "Maximum call duration for the day"
                  },
                  "low": {
                    "type": "integer",
                    "description": "Minimum call duration for the day"
                  }
                }
              },
              "weekly": {
                "type": "object",
                "required": ["average", "peak", "low"],
                "properties": {
                  "average": {
                    "type": "number",
                    "format": "float",
                    "description": "Average call duration for the week"
                  },
                  "peak": {
                    "type": "integer",
                    "description": "Maximum call duration for the week"
                  },
                  "low": {
                    "type": "integer",
                    "description": "Minimum call duration for the week"
                  }
                }
              },
              "monthly": {
                "type": "object",
                "required": ["average", "peak", "low"],
                "properties": {
                  "average": {
                    "type": "number",
                    "format": "float",
                    "description": "Average call duration for the month"
                  },
                  "peak": {
                    "type": "integer",
                    "description": "Maximum call duration for the month"
                  },
                  "low": {
                    "type": "integer",
                    "description": "Minimum call duration for the month"
                  }
                }
              },
              "rate_of_change_call_duration": {
                "type": "number",
                "format": "float",
                "description": "Rate of change in call duration"
              }
            }
          },
          "success_rate_breakdown": {
            "type": "object",
            "required": [
              "daily",
              "weekly",
              "monthly",
              "rate_of_change_success_rate"
            ],
            "properties": {
              "daily": {
                "type": "number",
                "format": "float",
                "description": "Daily success rate percentage"
              },
              "weekly": {
                "type": "number",
                "format": "float",
                "description": "Weekly success rate percentage"
              },
              "monthly": {
                "type": "number",
                "format": "float",
                "description": "Monthly success rate percentage"
              },
              "rate_of_change_success_rate": {
                "type": "number",
                "format": "float",
                "description": "Rate of change in success rate"
              }
            }
          },
          "ai_accuracy_rate": {
            "type": "object",
            "required": [
              "ai_accuracy",
              "total_sentiment",
              "transcription_rate",
              "rate_of_change_ai_accuracy_rate"
            ],
            "properties": {
              "ai_accuracy": {
                "type": "number",
                "format": "float",
                "description": "AI accuracy percentage"
              },
              "total_sentiment": {
                "type": "number",
                "format": "float",
                "description": "Total sentiment score"
              },
              "transcription_rate": {
                "type": "number",
                "format": "float",
                "description": "Transcription accuracy rate"
              },
              "rate_of_change_ai_accuracy_rate": {
                "type": "number",
                "format": "float",
                "description": "Rate of change in AI accuracy rate"
              }
            }
          }
        }
      },
      "DashboardCampaignList": {
  "type": "object",
  "required": ["response", "data"],
  "properties": {
    "response": {
      "type": "string",
      "description": "Status of the response",
      "enum": ["success"]
    },
    "data": {
      "type": "object",
      "required": ["inbound_campaigns", "outbound_campaigns", "quick_campaigns"],
      "properties": {
        "inbound_campaigns": {
          "type": "integer",
          "description": "Number of inbound campaigns"
        },
        "outbound_campaigns": {
          "type": "integer",
          "description": "Number of outbound campaigns"
        },
        "quick_campaigns": {
          "type": "integer",
          "description": "Number of quick campaigns"
        }
      }
    }
  }
      },
        "DashboardMonthlyData": {
        "type": "object",
        "required": [
          "success",
          "message",
          "total_cost",
          "total_call_duration",
          "completed_calls_percentage",
          "other_call_percentage",
          "monthly_data"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the data fetch was successful"
          },
          "message": {
            "type": "string",
            "description": "Message describing the result of the request"
          },
          "total_cost": {
            "type": "number",
            "format": "float",
            "description": "Total cost of the calls"
          },
          "total_call_duration": {
            "type": "integer",
            "description": "Total duration of all calls in seconds"
          },
          "completed_calls_percentage": {
            "type": "number",
            "format": "float",
            "description": "Percentage of calls that were completed"
          },
          "other_call_percentage": {
            "type": "number",
            "format": "float",
            "description": "Percentage of other (non-completed) calls"
          },
          "monthly_data": {
            "type": "array",
            "description": "Array of monthly data metrics",
            "items": {
              "type": "object",
              "required": ["name", "data"],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the metric (e.g., Total Calls)"
                },
                "data": {
                  "type": "array",
                  "description": "Array of integer values representing the metric data for each month",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      },
         "DashboardCampaignResult": {
        "type": "object",
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "description": "Total number of campaign results"
          },
          "next": {
            "type": "string",
            "nullable": true,
            "description": "URL to the next page of results"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "description": "URL to the previous page of results"
          },
          "results": {
            "type": "array",
            "description": "Array of campaign result objects",
            "items": {
              "type": "object",
              "required": [
                "id",
                "sid",
                "full_name",
                "contact_number",
                "call_duration",
                "status",
                "appointment_booked",
                "outcome",
                "contact_id",
                "direction",
                "recording_url",
                "transcription",
                "transcription_text",
                "notes",
                "improvement_tags",
                "credit_deduction",
                "errors",
                "calender_id",
                "response_sentiment",
                "created_at",
                "updated_at",
                "campaign"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Unique identifier for the campaign result"
                },
                "sid": {
                  "type": "string",
                  "nullable": true,
                  "description": "Session ID"
                },
                "full_name": {
                  "type": "string",
                  "description": "Full name of the contact"
                },
                "contact_number": {
                  "type": "string",
                  "description": "Contact phone number"
                },
                "call_duration": {
                  "type": "integer",
                  "description": "Duration of the call in seconds"
                },
                "status": {
                  "type": "string",
                  "description": "Status of the call"
                },
                "appointment_booked": {
                  "type": "boolean",
                  "description": "Indicates if an appointment was booked"
                },
                "outcome": {
                  "type": "string",
                  "description": "Outcome of the campaign"
                },
                "contact_id": {
                  "type": "integer",
                  "nullable": true,
                  "description": "ID of the contact"
                },
                "direction": {
                  "type": "string",
                  "description": "Direction of the call (inbound/outbound)"
                },
                "recording_url": {
                  "type": "string",
                  "nullable": true,
                  "description": "URL to the call recording"
                },
                "transcription": {
                  "type": "array",
                  "description": "Array of transcription data",
                  "items": {
                    "type": "string"
                  }
                },
                "transcription_text": {
                  "type": "string",
                  "description": "Full transcription text"
                },
                "notes": {
                  "type": "string",
                  "description": "Additional notes for the campaign"
                },
                "improvement_tags": {
                  "type": "array",
                  "description": "Array of tags for improvement",
                  "items": {
                    "type": "string"
                  }
                },
                "credit_deduction": {
                  "type": "string",
                  "description": "Credit deduction details"
                },
                "errors": {
                  "type": "string",
                  "description": "Any errors encountered"
                },
                "calender_id": {
                  "type": "integer",
                  "nullable": true,
                  "description": "Calendar ID associated with the call"
                },
                "response_sentiment": {
                  "type": "string",
                  "description": "Sentiment of the response"
                },
                "created_at": {
                  "type": "string",
                  "description": "Timestamp when the result was created"
                },
                "updated_at": {
                  "type": "string",
                  "description": "Timestamp when the result was last updated"
                },
                "campaign": {
                  "type": "string",
                  "description": "Name or ID of the campaign"
                }
              }
            }
          }
        }
      },
      "DashboardQuickCampaignResult": {
        "type": "object",
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "description": "Total number of quick campaign results"
          },
          "next": {
            "type": "string",
            "nullable": true,
            "description": "URL to the next page of results"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "description": "URL to the previous page of results"
          },
          "results": {
            "type": "array",
            "description": "Array of quick campaign result objects",
            "items": {
              "type": "object",
              "required": [
                "id",
                "sid",
                "contact_id",
                "contact_number",
                "email",
                "first_name",
                "last_name",
                "company_name",
                "industry",
                "address",
                "custom1",
                "custom2",
                "custom3",
                "custom4",
                "scheduling_charge",
                "calender_id",
                "appointment_booked",
                "call_duration",
                "status",
                "improvement_tags",
                "outcome",
                "recording_url",
                "transcription",
                "transcription_text",
                "notes",
                "credit_deduction",
                "errors",
                "response_sentiment",
                "triggered_by_crm",
                "created_at",
                "updated_at",
                "quick_campaign"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Unique identifier for the quick campaign result"
                },
                "sid": {
                  "type": "string",
                  "nullable": true,
                  "description": "Session ID"
                },
                "contact_id": {
                  "type": "integer",
                  "nullable": true,
                  "description": "ID of the contact"
                },
                "contact_number": {
                  "type": "string",
                  "description": "Contact phone number"
                },
                "email": {
                  "type": "string",
                  "nullable": true,
                  "description": "Email address of the contact"
                },
                "first_name": {
                  "type": "string",
                  "nullable": true,
                  "description": "First name of the contact"
                },
                "last_name": {
                  "type": "string",
                  "nullable": true,
                  "description": "Last name of the contact"
                },
                "company_name": {
                  "type": "string",
                  "nullable": true,
                  "description": "Name of the company"
                },
                "industry": {
                  "type": "string",
                  "nullable": true,
                  "description": "Industry of the contact"
                },
                "address": {
                  "type": "string",
                  "nullable": true,
                  "description": "Address of the contact"
                },
                "custom1": {
                  "type": "string",
                  "nullable": true,
                  "description": "Custom field 1"
                },
                "custom2": {
                  "type": "string",
                  "nullable": true,
                  "description": "Custom field 2"
                },
                "custom3": {
                  "type": "string",
                  "nullable": true,
                  "description": "Custom field 3"
                },
                "custom4": {
                  "type": "string",
                  "nullable": true,
                  "description": "Custom field 4"
                },
                "scheduling_charge": {
                  "type": "string",
                  "description": "Scheduling charge for the call"
                },
                "calender_id": {
                  "type": "integer",
                  "nullable": true,
                  "description": "Calendar ID associated with the call"
                },
                "appointment_booked": {
                  "type": "boolean",
                  "description": "Indicates if an appointment was booked"
                },
                "call_duration": {
                  "type": "integer",
                  "description": "Duration of the call in seconds"
                },
                "status": {
                  "type": "string",
                  "description": "Status of the call"
                },
                "improvement_tags": {
                  "type": "array",
                  "description": "Array of tags for improvement",
                  "items": {
                    "type": "string"
                  }
                },
                "outcome": {
                  "type": "string",
                  "description": "Outcome of the campaign"
                },
                "recording_url": {
                  "type": "string",
                  "nullable": true,
                  "description": "URL to the call recording"
                },
                "transcription": {
                  "type": "array",
                  "description": "Array of transcription data",
                  "items": {
                    "type": "string"
                  }
                },
                "transcription_text": {
                  "type": "string",
                  "description": "Full transcription text"
                },
                "notes": {
                  "type": "string",
                  "description": "Additional notes for the campaign"
                },
                "credit_deduction": {
                  "type": "string",
                  "description": "Credit deduction details"
                },
                "errors": {
                  "type": "string",
                  "description": "Any errors encountered"
                },
                "response_sentiment": {
                  "type": "string",
                  "description": "Sentiment of the response"
                },
                "triggered_by_crm": {
                  "type": "string",
                  "description": "CRM system that triggered the campaign"
                },
                "created_at": {
                  "type": "string",
                  "description": "Timestamp when the result was created"
                },
                "updated_at": {
                  "type": "string",
                  "description": "Timestamp when the result was last updated"
                },
                "quick_campaign": {
                  "type": "string",
                  "description": "Identifier for the quick campaign"
                }
              }
            }
          }
        }
      },
       "WhitelabelRequest": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string",
            "description": "Domain name for the whitelabel"
          },
          "legal_name": {
            "type": "string",
            "description": "Legal name of the entity"
          },
          "address": {
            "type": "string",
            "description": "Address associated with the entity"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Contact email address"
          },
          "reselling_price": {
            "type": "string",
            "description": "Price for reselling"
          },
          
          "btn_color": {
            "type": "string",
            "description": "Color for buttons in hex format"
          },
          "btn_hover_color": {
            "type": "string",
            "description": "Hover color for buttons in hex format"
          },
          "btn_text_color": {
            "type": "string",
            "description": "Text color for buttons in hex format"
          },
          "background_color_primary": {
            "type": "string",
            "description": "Primary background color in hex format"
          },
          "background_color_secondary": {
            "type": "string",
            "description": "Secondary background color in hex format"
          },
          "select_text_color": {
            "type": "string",
            "description": "Text color for select elements in hex format"
          },
          "text_color": {
            "type": "string",
            "description": "General text color in hex format"
          },
          "logo": {
            "type": "string",
            "format": "uri",
            "description": "URL to the logo image"
          },
          "fav_icon": {
            "type": "string",
            "format": "uri",
            "description": "URL to the favicon image"
          },
          "icon_color": {
            "type": "string",
            "description": "Color for icons in hex format"
          },
          "icon_background_color": {
            "type": "string",
            "description": "Background color for icons in hex format"
          },
          "hide_video": {
            "type": "boolean",
            "description": "Indicates if video content should be hidden"
          },
          
          "email_template_subject": {
            "type": "string",
            "description": "Subject line for email templates"
          },
          "email_template": {
            "type": "string",
            "description": "Content of the email template"
          },
          "coustum_css": {
            "type": "string",
            "description": "Custom CSS for the whitelabel"
          },
          "coustum_js": {
            "type": "string",
            "description": "Custom JavaScript for the whitelabel"
          },
          "loginpage_theme_name": {
            "type": "string",
            "description": "Name of the theme for the login page"
          },
          "text_hover_color": {
            "type": "string",
            "nullable": true,
            "description": "Text hover color in hex format"
          },
          "logo_background_color": {
            "type": "string",
            "nullable": true,
            "description": "Background color for the logo in hex format"
          },
          "layout_border_color": {
            "type": "string",
            "nullable": true,
            "description": "Border color for the layout in hex format"
          },
          "button_border_color": {
            "type": "string",
            "nullable": true,
            "description": "Border color for buttons in hex format"
          },
          "text_color_light": {
            "type": "string",
            "nullable": true,
            "description": "Light text color in hex format"
          },
          "sidebar_tab_hover_color": {
            "type": "string",
            "nullable": true,
            "description": "Hover color for sidebar tabs in hex format"
          }
        }
      },
      "WhitelabelResponse": {
        "type": "object",
        "required": ["success", "status_code", "data", "message"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the request was successful"
          },
          "status_code": {
            "type": "integer",
            "description": "HTTP status code of the response"
          },
          "data": {
            "type": "object",
            "required": [
              "id",
              "domain",
              "is_primary",
              "activate",
              "legal_name",
              "address",
              "email",
              "subsription_type",
              "subsription_id",
              "reselling_price",
              "stripe_key",
              "btn_color",
              "btn_hover_color",
              "btn_text_color",
              "background_color_primary",
              "background_color_secondary",
              "select_text_color",
              "text_color",
              "logo",
              "fav_icon",
              "icon_color",
              "icon_background_color",
              "hide_video",
              "sendgrid_token",
              "sendgrid_email",
              "sendgrid_domain_id",
              "domain_verified",
              "email_template_subject",
              "email_template",
              "coustum_css",
              "coustum_js",
              "loginpage_theme_name",
              "strip_account_id",
              "created_at",
              "updated_at",
              "tenant"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "description": "Unique identifier for the whitelabel domain"
              },
              "domain": {
                "type": "string",
                "description": "Domain name for the whitelabel"
              },
              "is_primary": {
                "type": "boolean",
                "description": "Indicates if this is the primary domain"
              },
              "activate": {
                "type": "boolean",
                "description": "Indicates if the domain is active"
              },
              "legal_name": {
                "type": "string",
                "description": "Legal name of the entity"
              },
              "address": {
                "type": "string",
                "description": "Address associated with the entity"
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "Contact email address"
              },
              "subsription_type": {
                "type": "string",
                "description": "Type of subscription"
              },
              "subsription_id": {
                "type": "string",
                "description": "Unique identifier for the subscription"
              },
              "reselling_price": {
                "type": "string",
                "description": "Price for reselling"
              },
              "stripe_key": {
                "type": "string",
                "description": "Stripe API key for payments"
              },
              "btn_color": {
                "type": "string",
                "description": "Color for buttons in hex format"
              },
              "btn_hover_color": {
                "type": "string",
                "description": "Hover color for buttons in hex format"
              },
              "btn_text_color": {
                "type": "string",
                "description": "Text color for buttons in hex format"
              },
              "background_color_primary": {
                "type": "string",
                "description": "Primary background color in hex format"
              },
              "background_color_secondary": {
                "type": "string",
                "description": "Secondary background color in hex format"
              },
              "select_text_color": {
                "type": "string",
                "description": "Text color for select elements in hex format"
              },
              "text_color": {
                "type": "string",
                "description": "General text color in hex format"
              },
              "logo": {
                "type": "string",
                "format": "uri",
                "description": "URL to the logo image"
              },
              "fav_icon": {
                "type": "string",
                "format": "uri",
                "description": "URL to the favicon image"
              },
              "icon_color": {
                "type": "string",
                "description": "Color for icons in hex format"
              },
              "icon_background_color": {
                "type": "string",
                "description": "Background color for icons in hex format"
              },
              "hide_video": {
                "type": "boolean",
                "description": "Indicates if video content should be hidden"
              },
              "sendgrid_token": {
                "type": "string",
                "nullable": true,
                "description": "SendGrid API token"
              },
              "sendgrid_email": {
                "type": "string",
                "format": "email",
                "description": "SendGrid email address"
              },
              "sendgrid_domain_id": {
                "type": "string",
                "description": "SendGrid domain ID"
              },
              "domain_verified": {
                "type": "boolean",
                "description": "Indicates if the domain is verified"
              },
              "email_template_subject": {
                "type": "string",
                "description": "Subject line for email templates"
              },
              "email_template": {
                "type": "string",
                "description": "Content of the email template"
              },
              "coustum_css": {
                "type": "string",
                "description": "Custom CSS for the whitelabel"
              },
              "coustum_js": {
                "type": "string",
                "description": "Custom JavaScript for the whitelabel"
              },
              "loginpage_theme_name": {
                "type": "string",
                "description": "Name of the theme for the login page"
              },
              "strip_account_id": {
                "type": "string",
                "description": "Stripe account ID"
              },
              "text_hover_color": {
                "type": "string",
                "nullable": true,
                "description": "Text hover color in hex format"
              },
              "logo_background_color": {
                "type": "string",
                "nullable": true,
                "description": "Background color for the logo in hex format"
              },
              "layout_border_color": {
                "type": "string",
                "nullable": true,
                "description": "Border color for the layout in hex format"
              },
              "button_border_color": {
                "type": "string",
                "nullable": true,
                "description": "Border color for buttons in hex format"
              },
              "text_color_light": {
                "type": "string",
                "nullable": true,
                "description": "Light text color in hex format"
              },
              "sidebar_tab_hover_color": {
                "type": "string",
                "nullable": true,
                "description": "Hover color for sidebar tabs in hex format"
              },
              "razorpay_account_status": {
                "type": "string",
                "nullable": true,
                "description": "Status of the Razorpay account"
              },
              "razorpay_product_config_id": {
                "type": "string",
                "nullable": true,
                "description": "Razorpay product configuration ID"
              },
              "razorpay_account_id": {
                "type": "string",
                "nullable": true,
                "description": "Razorpay account ID"
              },
              "business_type": {
                "type": "string",
                "nullable": true,
                "description": "Type of business"
              },
              "business_category": {
                "type": "string",
                "nullable": true,
                "description": "Category of the business"
              },
              "business_subcategory": {
                "type": "string",
                "nullable": true,
                "description": "Subcategory of the business"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the whitelabel domain was created"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the whitelabel domain was last updated"
              },
              "tenant": {
                "type": "integer",
                "description": "Unique identifier for the tenant"
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Message describing the result of the request"
          }
        }
      },
      "VerifyWhitelabelRequest": {
        "type": "object",
        "required": ["domain", "step"],
        "properties": {
          "domain": {
            "type": "string",
            "description": "Domain name for the whitelabel"
          },
          "step": {
            "type": "string",
            "description": "Verification step (e.g., email)"
          }
        }
      },
      "VerifyWhitelabelResponse": {
        "type": "object",
        "required": ["success", "status_code", "data", "message"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the verification was successful"
          },
          "status_code": {
            "type": "integer",
            "description": "HTTP status code of the response"
          },
          "data": {
            "type": "object",
            "required": ["verified", "ip"],
            "properties": {
              "verified": {
                "type": "boolean",
                "description": "Indicates if the domain is verified"
              },
              "ip": {
                "type": "string",
                "description": "IP address associated with the domain"
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Message describing the result of the verification"
          }
        }
      },
      "CreditPriceRequest": {
        "type": "object",
        "required": ["credit_price"],
        "properties": {
          "credit_price": {
            "type": "number",
            "format": "float",
            "description": "The credit price for the agency"
          }
        }
      },
      "CreditPriceResponse": {
        "type": "object",
        "required": ["success", "errors", "response", "message"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the request was successful"
          },
          "errors": {
            "type": "array",
            "description": "List of errors, if any",
            "items": {
              "type": "string"
            }
          },
          "response": {
            "type": "object",
            "required": ["credit_price"],
            "properties": {
              "credit_price": {
                "type": "number",
                "format": "float",
                "description": "The credit price for the agency"
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Message describing the result of the request"
          }
        }
      },
       "CreateStripeProductRequest": {
        "type": "object",
        "required": ["product_name", "unit_amount", "currency", "product_description"],
        "properties": {
          "product_name": {
            "type": "string",
            "description": "Name of the Stripe product"
          },
          "unit_amount": {
            "type": "integer",
            "description": "Price amount in the smallest currency unit (e.g., cents for USD)"
          },
          "currency": {
            "type": "string",
            "description": "Currency code for the price (e.g., usd)"
          },
          "product_description": {
            "type": "string",
            "description": "Description of the Stripe product"
          }
        }
      },
      "CreateStripeProductResponse": {
        "type": "object",
        "required": ["success", "errors", "response", "message"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the request was successful"
          },
          "errors": {
            "type": "array",
            "description": "List of errors, if any",
            "items": {
              "type": "string"
            }
          },
          "response": {
            "type": "object",
            "required": ["product_id", "product_name", "product_description", "price_id", "prices_amount", "prices_currency"],
            "properties": {
              "product_id": {
                "type": "string",
                "description": "Unique identifier for the created Stripe product"
              },
              "product_name": {
                "type": "string",
                "description": "Name of the created Stripe product"
              },
              "product_description": {
                "type": "string",
                "description": "Description of the created Stripe product"
              },
              "price_id": {
                "type": "string",
                "description": "Unique identifier for the created price"
              },
              "prices_amount": {
                "type": "integer",
                "description": "Price amount in the smallest currency unit"
              },
              "prices_currency": {
                "type": "string",
                "description": "Currency code for the price"
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Message describing the result of the request"
          }
        }
      },
       "ListStripeProductsResponse": {
        "type": "object",
        "required": ["success", "errors", "response", "message"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the request was successful"
          },
          "errors": {
            "type": "array",
            "description": "List of errors, if any",
            "items": {
              "type": "string"
            }
          },
          "response": {
            "type": "object",
            "required": ["product_prices"],
            "properties": {
              "product_prices": {
                "type": "array",
                "description": "List of Stripe products and their prices",
                "items": {
                  "type": "object",
                  "required": ["product_id", "product_name", "product_description", "prices_id", "prices_amount", "prices_currency"],
                  "properties": {
                    "product_id": {
                      "type": "string",
                      "description": "Unique identifier for the Stripe product"
                    },
                    "product_name": {
                      "type": "string",
                      "description": "Name of the Stripe product"
                    },
                    "product_description": {
                      "type": "string",
                      "description": "Description of the Stripe product"
                    },
                    "prices_id": {
                      "type": "string",
                      "description": "Unique identifier for the price"
                    },
                    "prices_amount": {
                      "type": "number",
                      "format": "float",
                      "description": "Price amount in the smallest currency unit"
                    },
                    "prices_currency": {
                      "type": "string",
                      "description": "Currency code for the price"
                    }
                  }
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Message describing the result of the request"
          }
        }
      },
      "CreateSubscriptionLinkRequest": {
        "type": "object",
        "required": ["price_id"],
        "properties": {
          "price_id": {
            "type": "string",
            "description": "Unique identifier for the Stripe price"
          }
        }
      },
      "CreateSubscriptionLinkResponse": {
        "type": "object",
        "required": ["success", "errors", "response", "message"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the request was successful"
          },
          "errors": {
            "type": "array",
            "description": "List of errors, if any",
            "items": {
              "type": "string"
            }
          },
          "response": {
            "type": "object",
            "required": ["payment_link"],
            "properties": {
              "payment_link": {
                "type": "string",
                "format": "uri",
                "description": "URL for the Stripe payment link"
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Message describing the result of the request"
          }
        }
      },
       "DeleteStripeProductResponse": {
        "type": "object",
        "required": ["success", "errors", "response", "message"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the request was successful"
          },
          "errors": {
            "type": "array",
            "description": "List of errors, if any",
            "items": {
              "type": "string"
            }
          },
          "response": {
            "type": "object",
            "description": "Empty object containing no additional data"
          },
          "message": {
            "type": "string",
            "description": "Message describing the result of the request"
          }
        }
      },
      "CreditPlansResponse": {
        "type": "array",
        "description": "List of available credit plans",
        "items": {
          "type": "object",
          "required": ["id", "name", "description", "amount", "credits", "currency", "discount", "features", "created_at", "updated_at"],
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique identifier for the credit plan"
            },
            "name": {
              "type": "string",
              "description": "Name of the credit plan"
            },
            "description": {
              "type": "string",
              "description": "Description of the credit plan"
            },
            "amount": {
              "type": "string",
              "description": "Price of the credit plan"
            },
            "credits": {
              "type": "string",
              "description": "Number of credits included in the plan"
            },
            "currency": {
              "type": "string",
              "description": "Currency code for the price (e.g., usd)"
            },
            "discount": {
              "type": "integer",
              "description": "Discount percentage for the plan"
            },
            "features": {
              "type": "object",
              "description": "Features included in the credit plan",
              "additionalProperties": {
                "type": "string",
                "description": "Description of a specific feature"
              }
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "Timestamp when the credit plan was created"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "description": "Timestamp when the credit plan was last updated"
            }
          }
        }
      },
      "CreateCreditPlanRequest": {
        "type": "object",
        "required": ["name", "description", "amount", "credits", "currency", "discount", "features"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the credit plan"
          },
          "description": {
            "type": "string",
            "description": "Description of the credit plan"
          },
          "amount": {
            "type": "integer",
            "description": "Price of the credit plan"
          },
          "credits": {
            "type": "integer",
            "description": "Number of credits included in the plan"
          },
          "currency": {
            "type": "string",
            "description": "Currency code for the price (e.g., usd)"
          },
          "discount": {
            "type": "integer",
            "description": "Discount percentage for the plan"
          },
          "features": {
            "type": "object",
            "description": "Features included in the credit plan",
            "additionalProperties": {
              "type": "string",
              "description": "Description of a specific feature"
            }
          }
        }
      },
      "CreateCreditPlanResponse": {
        "type": "object",
        "required": ["id", "name", "description", "amount", "credits", "currency", "discount", "features", "created_at", "updated_at"],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the credit plan"
          },
          "name": {
            "type": "string",
            "description": "Name of the credit plan"
          },
          "description": {
            "type": "string",
            "description": "Description of the credit plan"
          },
          "amount": {
            "type": "string",
            "description": "Price of the credit plan"
          },
          "credits": {
            "type": "string",
            "description": "Number of credits included in the plan"
          },
          "currency": {
            "type": "string",
            "description": "Currency code for the price (e.g., usd)"
          },
          "discount": {
            "type": "integer",
            "description": "Discount percentage for the plan"
          },
          "features": {
            "type": "object",
            "description": "Features included in the credit plan",
            "additionalProperties": {
              "type": "string",
              "description": "Description of a specific feature"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the credit plan was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the credit plan was last updated"
          }
        }
      },
      "PurchasedThemesResponse": {
        "type": "array",
        "description": "List of purchased themes",
        "items": {
          "type": "object",
          "required": ["id", "name", "slug", "description", "preview_url"],
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique identifier for the theme"
            },
            "name": {
              "type": "string",
              "description": "Name of the theme"
            },
            "slug": {
              "type": "string",
              "description": "Slug identifier for the theme"
            },
            "description": {
              "type": "string",
              "description": "Description of the theme"
            },
            "preview_url": {
              "type": "string",
              "format": "uri",
              "description": "URL to preview the theme"
            }
          }
        }
      },
      "CreateCheckoutSessionThemeResponse": {
        "type": "object",
        "required": ["checkout_url"],
        "properties": {
          "checkout_url": {
            "type": "string",
            "format": "uri",
            "description": "URL for the Stripe checkout session"
          }
        }
      },
       "AICallAgentListResponse": {
        "type": "object",
        "required": ["total_count", "total_page", "Current_page_no", "next_page_number", "previous_page_number", "page_size", "data"],
        "properties": {
          "total_count": {
            "type": "integer",
            "description": "Total number of AI call agents"
          },
          "total_page": {
            "type": "integer",
            "description": "Total number of pages"
          },
          "Current_page_no": {
            "type": "integer",
            "description": "Current page number"
          },
          "next_page_number": {
            "type": "integer",
            "nullable": true,
            "description": "Next page number, null if no next page"
          },
          "previous_page_number": {
            "type": "string",
            "nullable": true,
            "description": "Previous page number, null if no previous page"
          },
          "page_size": {
            "type": "integer",
            "description": "Number of agents per page"
          },
          "data": {
            "type": "array",
            "description": "List of AI call agents",
            "items": {
              "type": "object",
              "required": [
                "pk",
                "agent_name",
                "agent_id",
                "voice_id",
                "language",
                "interruption_sensitivity",
                "voicemail",
                "voicemail_message",
                "end_call_after_silence",
                "max_call_duration",
                "reminder_trigger",
                "ambient_sound",
                "analysis_data",
                "llm",
                "voice_speed",
                "voice_temperature",
                "volume",
                "enable_backchannel",
                "normalize_for_speech",
                "enable_transcription_formatting",
                "reminder_trigger_ms",
                "reminder_max_count",
                "boosted_keywords",
                "ambient_sound_volume",
                "voicemail_detection_timeout_ms",
                "begin_message_delay_ms",
                "updated_at",
                "is_locked",
                "calendar_id",
                "inbound_appoitment",
                "ring_duration_sec",
                "stt_mode",
                "backchannel_words",
                "backchannel_frequency",
                "call_scheduling",
                "agent_crm_type",
                "voicemail_option"
              ],
              "properties": {
                "pk": {
                  "type": "integer",
                  "description": "Primary key for the AI call agent"
                },
                "agent_name": {
                  "type": "string",
                  "description": "Name of the AI call agent"
                },
                "agent_id": {
                  "type": "string",
                  "description": "Unique identifier for the AI call agent"
                },
                "voice_id": {
                  "type": "string",
                  "description": "Identifier for the voice used by the agent"
                },
                "language": {
                  "type": "string",
                  "description": "Language code or type (e.g., en-US, multi)"
                },
                "interruption_sensitivity": {
                  "type": "string",
                  "description": "Sensitivity level for interruptions"
                },
                "voicemail": {
                  "type": "boolean",
                  "description": "Indicates if voicemail is enabled"
                },
                "voicemail_message": {
                  "type": "string",
                  "nullable": true,
                  "description": "Voicemail message content"
                },
                "end_call_after_silence": {
                  "type": "integer",
                  "description": "Duration of silence before ending the call (in seconds)"
                },
                "max_call_duration": {
                  "type": "integer",
                  "description": "Maximum call duration (in minutes)"
                },
                "reminder_trigger": {
                  "type": "integer",
                  "description": "Time before triggering a reminder (in seconds)"
                },
                "ambient_sound": {
                  "type": "string",
                  "nullable": true,
                  "description": "Ambient sound setting"
                },
                "analysis_data": {
                  "type": "array",
                  "description": "Data for call analysis",
                  "items": {
                    "type": "string"
                  }
                },
                "llm": {
                  "type": "integer",
                  "description": "Identifier for the language model used"
                },
                "voice_speed": {
                  "type": "number",
                  "format": "float",
                  "description": "Speed of the voice"
                },
                "voice_temperature": {
                  "type": "number",
                  "format": "float",
                  "description": "Temperature setting for voice generation"
                },
                "volume": {
                  "type": "number",
                  "format": "float",
                  "description": "Volume level for the voice"
                },
                "enable_backchannel": {
                  "type": "boolean",
                  "description": "Indicates if backchannel responses are enabled"
                },
                "normalize_for_speech": {
                  "type": "boolean",
                  "description": "Indicates if speech normalization is enabled"
                },
                "enable_transcription_formatting": {
                  "type": "boolean",
                  "description": "Indicates if transcription formatting is enabled"
                },
                "reminder_trigger_ms": {
                  "type": "integer",
                  "description": "Reminder trigger time in milliseconds"
                },
                "reminder_max_count": {
                  "type": "integer",
                  "description": "Maximum number of reminders"
                },
                "boosted_keywords": {
                  "type": "array",
                  "description": "List of keywords to boost in processing",
                  "items": {
                    "type": "string"
                  }
                },
                "ambient_sound_volume": {
                  "type": "number",
                  "format": "float",
                  "description": "Volume level for ambient sound"
                },
                "voicemail_detection_timeout_ms": {
                  "type": "integer",
                  "description": "Timeout for voicemail detection in milliseconds"
                },
                "begin_message_delay_ms": {
                  "type": "integer",
                  "description": "Delay before starting message in milliseconds"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Timestamp when the agent was last updated"
                },
                "is_locked": {
                  "type": "boolean",
                  "description": "Indicates if the agent is locked"
                },
                "calendar_id": {
                  "type": "string",
                  "nullable": true,
                  "description": "Identifier for associated calendar"
                },
                "inbound_appoitment": {
                  "type": "boolean",
                  "description": "Indicates if inbound appointment scheduling is enabled"
                },
                "ring_duration_sec": {
                  "type": "integer",
                  "description": "Ring duration in seconds"
                },
                "stt_mode": {
                  "type": "string",
                  "description": "Speech-to-text mode (e.g., fast)"
                },
                "backchannel_words": {
                  "type": "string",
                  "nullable": true,
                  "description": "Words used for backchannel responses"
                },
                "backchannel_frequency": {
                  "type": "number",
                  "format": "float",
                  "description": "Frequency of backchannel responses"
                },
                "call_scheduling": {
                  "type": "boolean",
                  "description": "Indicates if call scheduling is enabled"
                },
                "agent_crm_type": {
                  "type": "string",
                  "nullable": true,
                  "description": "Type of CRM integration for the agent"
                },
                "voicemail_option": {
                  "type": "object",
                  "description": "Voicemail options for the agent",
                  "properties": {
                    "action": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Type of voicemail action (e.g., hangup, prompt)"
                        },
                        "text": {
                          "type": "string",
                          "description": "Text for voicemail prompt, if applicable"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CreateAgentResponse": {
        "type": "object",
        "required": ["success", "message", "data"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the request was successful"
          },
          "message": {
            "type": "string",
            "description": "Message describing the result of the request"
          },
          "data": {
            "type": "object",
            "required": ["agent", "llm"],
            "properties": {
              "agent": {
                "type": "object",
                "required": [
                  "pk",
                  "agent_name",
                  "agent_id",
                  "voice_id",
                  "language",
                  "interruption_sensitivity",
                  "voicemail",
                  "voicemail_message",
                  "end_call_after_silence",
                  "max_call_duration",
                  "reminder_trigger",
                  "ambient_sound",
                  "analysis_data",
                  "llm",
                  "voice_speed",
                  "voice_temperature",
                  "volume",
                  "enable_backchannel",
                  "normalize_for_speech",
                  "enable_transcription_formatting",
                  "reminder_trigger_ms",
                  "reminder_max_count",
                  "boosted_keywords",
                  "ambient_sound_volume",
                  "voicemail_detection_timeout_ms",
                  "begin_message_delay_ms",
                  "updated_at",
                  "is_locked",
                  "calendar_id",
                  "inbound_appoitment",
                  "ring_duration_sec",
                  "stt_mode",
                  "backchannel_words",
                  "backchannel_frequency",
                  "call_scheduling",
                  "agent_crm_type",
                  "voicemail_option"
                ],
                "properties": {
                  "pk": {
                    "type": "integer",
                    "description": "Primary key for the AI call agent"
                  },
                  "agent_name": {
                    "type": "string",
                    "description": "Name of the AI call agent"
                  },
                  "agent_id": {
                    "type": "string",
                    "description": "Unique identifier for the AI call agent"
                  },
                  "voice_id": {
                    "type": "string",
                    "description": "Identifier for the voice used by the agent"
                  },
                  "language": {
                    "type": "string",
                    "description": "Language code or type (e.g., en-US, multi)"
                  },
                  "interruption_sensitivity": {
                    "type": "string",
                    "description": "Sensitivity level for interruptions"
                  },
                  "voicemail": {
                    "type": "boolean",
                    "description": "Indicates if voicemail is enabled"
                  },
                  "voicemail_message": {
                    "type": "string",
                    "nullable": true,
                    "description": "Voicemail message content"
                  },
                  "end_call_after_silence": {
                    "type": "integer",
                    "description": "Duration of silence before ending the call (in seconds)"
                  },
                  "max_call_duration": {
                    "type": "integer",
                    "description": "Maximum call duration (in minutes)"
                  },
                  "reminder_trigger": {
                    "type": "integer",
                    "description": "Time before triggering a reminder (in seconds)"
                  },
                  "ambient_sound": {
                    "type": "string",
                    "nullable": true,
                    "description": "Ambient sound setting"
                  },
                  "analysis_data": {
                    "type": "array",
                    "description": "Data for call analysis",
                    "items": {
                      "type": "string"
                    }
                  },
                  "llm": {
                    "type": "integer",
                    "description": "Identifier for the language model used"
                  },
                  "voice_speed": {
                    "type": "number",
                    "format": "float",
                    "description": "Speed of the voice"
                  },
                  "voice_temperature": {
                    "type": "number",
                    "format": "float",
                    "description": "Temperature setting for voice generation"
                  },
                  "volume": {
                    "type": "number",
                    "format": "float",
                    "description": "Volume level for the voice"
                  },
                  "enable_backchannel": {
                    "type": "boolean",
                    "description": "Indicates if backchannel responses are enabled"
                  },
                  "normalize_for_speech": {
                    "type": "boolean",
                    "description": "Indicates if speech normalization is enabled"
                  },
                  "enable_transcription_formatting": {
                    "type": "boolean",
                    "description": "Indicates if transcription formatting is enabled"
                  },
                  "reminder_trigger_ms": {
                    "type": "integer",
                    "description": "Reminder trigger time in milliseconds"
                  },
                  "reminder_max_count": {
                    "type": "integer",
                    "description": "Maximum number of reminders"
                  },
                  "boosted_keywords": {
                    "type": "array",
                    "description": "List of keywords to boost in processing",
                    "items": {
                      "type": "string"
                    }
                  },
                  "ambient_sound_volume": {
                    "type": "number",
                    "format": "float",
                    "description": "Volume level for ambient sound"
                  },
                  "voicemail_detection_timeout_ms": {
                    "type": "integer",
                    "description": "Timeout for voicemail detection in milliseconds"
                  },
                  "begin_message_delay_ms": {
                    "type": "integer",
                    "description": "Delay before starting message in milliseconds"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Timestamp when the agent was last updated"
                  },
                  "is_locked": {
                    "type": "boolean",
                    "description": "Indicates if the agent is locked"
                  },
                  "calendar_id": {
                    "type": "string",
                    "nullable": true,
                    "description": "Identifier for associated calendar"
                  },
                  "inbound_appoitment": {
                    "type": "boolean",
                    "description": "Indicates if inbound appointment scheduling is enabled"
                  },
                  "ring_duration_sec": {
                    "type": "integer",
                    "description": "Ring duration in seconds"
                  },
                  "stt_mode": {
                    "type": "string",
                    "description": "Speech-to-text mode (e.g., fast)"
                  },
                  "backchannel_words": {
                    "type": "string",
                    "nullable": true,
                    "description": "Words used for backchannel responses"
                  },
                  "backchannel_frequency": {
                    "type": "number",
                    "format": "float",
                    "description": "Frequency of backchannel responses"
                  },
                  "call_scheduling": {
                    "type": "boolean",
                    "description": "Indicates if call scheduling is enabled"
                  },
                  "agent_crm_type": {
                    "type": "string",
                    "nullable": true,
                    "description": "Type of CRM integration for the agent"
                  },
                  "voicemail_option": {
                    "type": "object",
                    "description": "Voicemail options for the agent",
                    "properties": {
                      "action": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Type of voicemail action (e.g., hangup)"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "llm": {
                "type": "object",
                "required": [
                  "pk",
                  "model",
                  "states",
                  "s2s_model",
                  "model_temperature",
                  "general_prompt",
                  "general_tools",
                  "begin_message",
                  "ghl_book_meeting",
                  "price_set_per_model",
                  "custom_message"
                ],
                "properties": {
                  "pk": {
                    "type": "integer",
                    "description": "Primary key for the language model"
                  },
                  "model": {
                    "type": "string",
                    "description": "Name of the language model"
                  },
                  "states": {
                    "type": "string",
                    "nullable": true,
                    "description": "State settings for the model"
                  },
                  "s2s_model": {
                    "type": "string",
                    "nullable": true,
                    "description": "Speech-to-speech model identifier"
                  },
                  "model_temperature": {
                    "type": "string",
                    "description": "Temperature setting for the model"
                  },
                  "general_prompt": {
                    "type": "string",
                    "description": "General prompt for the model"
                  },
                  "general_tools": {
                    "type": "array",
                    "description": "List of tools available to the model",
                    "items": {
                      "type": "object"
                    }
                  },
                  "begin_message": {
                    "type": "string",
                    "description": "Initial message for the model"
                  },
                  "ghl_book_meeting": {
                    "type": "boolean",
                    "description": "Indicates if meeting booking is enabled"
                  },
                  "price_set_per_model": {
                    "type": "string",
                    "description": "Price set for the model"
                  },
                  "custom_message": {
                    "type": "string",
                    "nullable": true,
                    "description": "Custom message for the model"
                  }
                }
              }
            }
          }
        }
      },
      "UpdateLLMRequest": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string",
            "enum": [
              "gpt-4o",
              "gpt-4o-mini",
              "gpt-4.1",
              "gpt-4.1-mini",
              "gpt-4.1-nano",
              "claude-3.7-sonnet",
              "claude-3.5-haiku",
              "gemini-2.0-flash",
              "gemini-2.0-flash-lite"
            ],
            "nullable": true,
            "description": "Select the underlying text LLM. If not set, defaults to gpt-4o."
          },
          "s2s_model": {
            "type": "string",
            "enum": ["gpt-4o-realtime", "gpt-4o-mini-realtime"],
            "nullable": true,
            "description": "Select the underlying speech-to-speech model. Can only set this or model, not both."
          },
          "model_temperature": {
            "type": "number",
            "format": "float",
            "minimum": 0,
            "maximum": 1,
            "description": "Controls randomness of the response. Lower values are more deterministic, higher values are more random. Defaults to 0 if unset."
          },
          "model_high_priority": {
            "type": "boolean",
            "description": "Enables fast tier with high priority pool for lower latency. Defaults to false."
          },
          "general_prompt": {
            "type": "string",
            "nullable": true,
            "description": "General prompt appended to system prompt regardless of agent state."
          },
          "general_tools": {
    "type": "array",
    "items": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "end_call",
              "description": "The tool type to end the call."
            },
            "name": {
              "type": "string",
              "description": "The name of the tool.",
              "example": "end_call"
            },
            "description": {
              "type": "string",
              "description": "A description of what the tool does.",
              "example": "Terminates the ongoing call."
            }
          },
          "required": ["type", "name", "description"]
        },
        {
  "type": "object",
  "properties": {
    "type": {
      "type": "string",
      "const": "call_transfer",
      "description": "The tool type to transfer the call."
    },
    "name": {
      "type": "string",
      "description": "The name of the tool, must not contain spaces.",
      "example": "transfer_call1",
      "pattern": "^[^\\s]+$"
    },
    "description": {
      "type": "string",
      "description": "A description of what the tool does.",
      "example": "Transfers the call to another agent or number."
    },
    "transfer_destination": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "predefined",
              "description": "Indicates a predefined phone number for transfer."
            },
            "number": {
              "type": "string",
              "description": "The phone number to transfer the call to in E.164 format.",
              "example": "+911111111111",
              "pattern": "^\\+[1-9]\\d{1,14}$"
            }
          },
          "required": ["type", "number"],
          "description": "Details for transferring to a predefined number."
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "inferred",
              "description": "Indicates dynamic routing for call transfer."
           

 },
            "prompt": {
              "type": "string",
              "description": "The prompt to determine the transfer destination.",
              "example": "If the user wants to reach support, transfer to +1 (925) 222-4452; if the user wants to reach sales, transfer to +1 (925) 1111-3444"
            }
          },
          "required": ["type", "prompt"],
          "description": "Details for dynamically determining the transfer destination."
        }
      ],
      "description": "The destination details for the call transfer.",
      "nullable": true
    },
    "transfer_option": {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "cold_transfer",
              "description": "Indicates a cold transfer."
            },
            "show_transferee_as_caller": {
              "type": "boolean",
              "description": "Whether to display the transferee's number as the caller ID.",
              "example": false
            },
            "agent_detection_timeout_ms": {
              "type": "number",
              "description": "Time in milliseconds to wait before considering the transfer failed.",
              "example": 5000,
              "minimum": 10000,
              "maximum": 300000
            },
            "on_hold_music": {
              "type": "string",
              "description": "Music to play while the caller is being transferred.",
              "enum": ["none", "ringtone", "relaxing_sound", "uplifting_beats"],
              "example": "none"
            },
            "opt_out_human_detection": {
              "type": "boolean",
              "description": "Whether to skip human detection for the transfer.",
              "example": false
            },
            "opt_out_initial_message": {
              "type": "boolean",
              "description": "Whether to skip the AI saying 'Hello' after connecting the call.",
              "example": false
            }
          },
          "required": [
            "type",
            "show_transferee_as_caller",
            "agent_detection_timeout_ms",
            "on_hold_music",
            "opt_out_human_detection",
            "opt_out_initial_message"
          ],
          "description": "Options for cold transfer."
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "warm_transfer",
              "description": "Indicates a warm transfer."
            },
            "public_handoff_option": {
              "type": "object",
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "prompt",
                      "description": "Indicates a prompt-based handoff."
                    },
                    "prompt": {
                      "type": "string",
                      "description": "The prompt for the warm transfer public handoff.",
                      "example": "Please hold while I connect you to the support team."
                    }
                  },
                  "required": ["type", "prompt"],
                  "description": "Prompt-based public handoff for warm transfer."
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "static_message",
                      "description": "Indicates a static message handoff."
                    },
                    "message": {
                      "type": "string",
                      "description": "The static message for the warm transfer public handoff.",
                      "example": "Transferring your call now."
                    }
                  },
                  "required": ["type", "message"],
                  "description": "Static message public handoff for warm transfer."
                }
              ],
              "description": "Public handoff options for warm transfer."
            },
            "private_handoff_option": {
              "type": "object",
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "prompt",
                      "description": "Indicates a prompt-based private handoff."
                    },
                    "prompt": {
                      "type": "string",
                      "description": "The prompt for the warm transfer private handoff.",
                      "example": "This is a call regarding a support issue."
                    }
                  },
                  "required": ["type", "prompt"],
                  "description": "Prompt-based private handoff for warm transfer."
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "static_message",
                      "description": "Indicates a static message private handoff."
                    },
                    "message": {
                      "type": "string",
                      "description": "The static message for the warm transfer private handoff.",
                      "example": "Support call incoming."
                    }
                  },
                  "required": ["type", "message"],
                  "description": "Static message private handoff for warm transfer."
                }
              ],
              "description": "Private handoff options for warm transfer."
            },
            "agent_detection_timeout_ms": {
              "type": "number",
              "description": "Time in milliseconds to wait before considering the transfer failed.",
              "example": 5000,
              "minimum": 10000,
              "maximum": 300000
            },
            "on_hold_music": {
              "type": "string",
              "description": "Music to play while the caller is being transferred.",
              "enum": ["none", "ringtone", "relaxing_sound", "uplifting_beats"],
              "example": "none"
            },
            "opt_out_human_detection": {
              "type": "boolean",
              "description": "Whether to skip human detection for the transfer.",
              "example": false
            },
            "opt_out_initial_message": {
              "type": "boolean",
              "description": "Whether to skip the AI saying 'Hello' after connecting the call.",
              "example": false
            }
          },
          "required": [
            "type",
            "public_handoff_option",
            "private_handoff_option",
            "agent_detection_timeout_ms",
            "on_hold_music",
            "opt_out_human_detection",
            "opt_out_initial_message"
          ],
          "description": "Options for warm transfer."
        }
      ],
      "description": "Options for the call transfer type.",
      "nullable": true
    }
  },
  "required": [
    "type",
    "name",
    "description",
    "transfer_destination",
    "transfer_option"
  ]
},
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "book_appointment_cal",
              "description": "The tool type to book an appointment in the calendar."
            },
            "name": {
              "type": "string",
              "description": "The name of the tool.",
              "example": "Book_Calendar"
            },
            "description": {
              "type": "string",
              "description": "A description of what the tool does.",
              "example": "Book Calendar Availability"
            },
            "cal_api_key": {
              "type": "string",
              "description": "The Cal.com API key for accessing the calendar.",
              "example": "cal_api_1234567890"
            },
            "event_type_id": {
              "type": "integer",
              "description": "The ID of the event type to book in the calendar.",
              "example": 12345
            },
            "timezone": {
              "type": "string",
              "description": "The timezone for the appointment.",
              "example": "America/Los_Angeles"
            }
          },
          "required": ["type", "name", "description", "cal_api_key", "event_type_id", "timezone"],
          "description": "Configuration for booking an appointment in the calendar."
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "check_availability_cal",
              "description": "The tool type to check calendar availability."
            },
            "name": {
              "type": "string",
              "description": "The name of the tool.",
              "example": "check_availability"
            },
            "description": {
              "type": "string",
              "description": "A description of what the tool does.",
              "example": "Checks available time slots in the calendar."
            },
            "parameters": {
              "type": "object",
              "properties": {
                "cal_api_key": {
                  "type": "string",
                  "description": "The Cal.com API key for accessing the calendar.",
                  "example": "cal_api_1234567890"
                },
                "event_type_id": {
                  "type": "integer",
                  "description": "The ID of the event type to check for availability.",
                  "example": 12345
                },
                "date": {
                  "type": "string",
                  "format": "date",
                  "description": "The date to check for availability.",
                  "example": "2025-08-15"
                },
                "timezone": {
                  "type": "string",
                  "description": "The timezone for the availability check.",
                  "example": "America/Los_Angeles"
                }
              },
              "required": ["cal_api_key", "event_type_id", "date", "timezone"],
              "description": "Parameters required for checking calendar availability."
            }
          },
          "required": ["type", "name", "description", "parameters"],
          "description": "Configuration for checking calendar availability."
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "press_digit",
              "description": "The tool type to press a digit during a call."
            },
            "name": {
              "type": "string",
              "description": "The name of the tool.",
              "example": "press_digit"
            },
            "description": {
              "type": "string",
              "description": "A description of what the tool does.",
              "example": "Simulates pressing a digit on the phone keypad."
            },
            "parameters": {
              "type": "object",
              "properties": {
                "digit": {
                  "type": "string",
                  "description": "The digit to press (0-9, *, #).",
                  "example": "1"
                }
              },
              "required": ["digit"],
              "description": "Parameters required for pressing a digit.",
              "nullable": true
            }
          },
          "required": ["type", "name", "description"]
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "agent_swap",
              "description": "The tool type to swap to another agent."
            },
            "name": {
              "type": "string",
              "description": "The name of the tool.",
              "example": "agent_transfer"
            },
            "description": {
              "type": "string",
              "description": "A description of what the tool does.",
              "example": "Swaps the current agent with another agent."
            },
            "agent_id": {
              "type": "string",
              "description": "The ID of the agent to swap to.",
              "example": "agent_456"
            },
            "execution_message_description": {
              "type": "string",
              "description": "The message to be spoken during the agent swap execution, if enabled.",
              "example": "Please hold while I transfer you to another agent.",
              "nullable": true
            },
            "post_call_analysis_setting": {
              "type": "string",
              "enum": ["both_agents", "only_destination_agent"],
              "description": "Determines which agents are included in post-call analysis.",
              "example": "both_agents"
            },
            "speak_during_execution": {
              "type": "boolean",
              "description": "Whether to speak the execution message during the agent swap.",
              "example": true
            }
          },
          "required": [
            "type",
            "name",
            "description",
            "agent_id",
            "post_call_analysis_setting",
            "speak_during_execution"
          ],
          "description": "Configuration for swapping to another agent."
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "extract_dynamic_variable",
              "description": "The tool type to swap to another agent."
            },
            "name": {
              "type": "string",
              "description": "Name of the tool. Must be unique within all tools available to LLM at any given time. Must be consisted of a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64 (no space allowed)."
            },
            "description": {
              "type": "string",
              "description": "Describes what the tool does, sometimes can also include information about when to call the tool."
                        },
                        "variables":{
                          "type": "array",
    "items": {
      "oneOf": [
        {
          "title":"string",
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "string",
              "description": "The data type of the analysis field, set to string."
            },
            "name": {
              "type": "string",
              "description": "The name of the analysis field.",
              "examples": ["sentiment", "key_topic", "action_item"]
            },
            "description": {
              "type": "string",
              "description": "A description of what the analysis field represents.",
              "examples": ["Sentiment of the call", "Key topic discussed", "Action item assigned"]
            },
            "examples": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Example values for the analysis field.",
              "nullable": true,
              "examples": [
                ["happy customer", "urgent issue"],
                ["pricing", "product feedback"],
                ["follow-up call", "send email"]
              ]
            }
          },
          "required": ["type", "name", "description"]
        },
        {
          "title":"enum",
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "enum",
              "description": "The data type of the analysis field, set to enum."
            },
            "name": {
              "type": "string",
              "description": "The name of the analysis field.",
              "examples": ["sentiment", "status", "priority"]
            },
            "description": {
              "type": "string",
              "description": "A description of what the analysis field represents.",
              "examples": ["Sentiment of the call", "Status of the call", "Priority level"]
            },
            "choices": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Possible values for the analysis field.",
              "nullable": true,
              "examples": [
                ["positive", "negative", "neutral"],
                ["successful", "unsuccessful", "pending"],
                ["high", "medium", "low"]
              ]
            }
          },
          "required": ["type", "name", "description"]
        },
        {
          "title":"boolean",
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "boolean",
              "description": "The data type of the analysis field, set to boolean."
            },
            "name": {
              "type": "string",
              "description": "The name of the analysis field.",
              "examples": ["is_urgent", "is_resolved"]
            },
            "description": {
              "type": "string",
              "description": "A description of what the analysis field represents.",
              "examples": ["Whether the issue is urgent", "Whether the issue is resolved"]
            }
          },
          "required": ["type", "name", "description"]
        },
        {
          "title":"number",
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "number",
              "description": "The data type of the analysis field, set to number."
            },
            "name": {
              "type": "string",
              "description": "The name of the analysis field.",
              "examples": ["call_duration", "customer_rating"]
            },
            "description": {
              "type": "string",
              "description": "A description of what the analysis field represents.",
              "examples": ["Duration of the call in minutes", "Customer satisfaction rating"]
            }
          },
          "required": ["type", "name", "description"]
        }
      ],
      "description": "Configuration for a single post-call analysis field."
    }
                        }
          },
          "required": [
            "type",
            "name",
            "description",
            "agent_id",
            "post_call_analysis_setting",
            "speak_during_execution"
          ],
          "description": "Configuration for swapping to another agent."
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "mcp"
            },
            "name": {
              "type": "string",
              "description": "Name of the MCP tool."
            },
            "description": {
              "type": "string",
              "description": "Description of the MCP tool."
                        },
            "mcp_id": {
              "type": "string",
              "description": "Unique id of the MCP."
                        },
          "input_schema": {
    "type": "object",
    "description": "The input schema of the MCP tool.",
    "properties": {
      "{key}": {
        "type": "string",
        "description": "Any property key under input_schema, represented as a string."
      }
    },
    "child_attributes_hidden": true
  }
          },
          "required": [
            "type",
            "name",
            "description",
            "agent_id",
            "post_call_analysis_setting",
            "speak_during_execution"
          ],
          "description": "Configuration for swapping to another agent."
        }
      ],
      "description": "Configuration for a single tool available to the model."
    },
    "description": "List of tools the model may call (e.g., end call, transfer call, or custom tools).",
    "nullable": true
  },
          "begin_message": {
            "type": "string",
            "nullable": true,
            "description": "First utterance said by the agent. If empty, agent waits for user to speak. If not set, LLM generates dynamically."
          }
        }
      },
      "UpdateLLMResponse":{
        "type": "object",
        "required": ["success", "message", "data", "prices"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the request was successful"
          },
          "message": {
            "type": "string",
            "description": "Message describing the result of the request"
          },
          "default_dynamic_variables": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "A dictionary of default dynamic variables used in the model"
          },
          
          "data": {
  "type": "object",
  "required": [
    "pk",
    "model",
    "states",
    "s2s_model",
    "model_temperature",
    "general_prompt",
    "general_tools",
    "begin_message",
    "ghl_book_meeting",
    "price_set_per_model",
    "custom_message",
    "default_dynamic_variables"
  ],
  "properties": {
    "pk": { "type": "integer" },
    "model": { "type": "string" },
    "states": { "type": "string", "nullable": true },
    "s2s_model": { "type": "string", "nullable": true },
    "model_temperature": { "type": "string" },
    "general_prompt": { "type": "string" },
    "general_tools": {
      "type": "array",
      "items": { "type": "object" }
    },
    "begin_message": { "type": "string" },
    "ghl_book_meeting": { "type": "boolean" },
    "price_set_per_model": { "type": "string" },
    "custom_message": { "type": "string", "nullable": true },
    "default_dynamic_variables": {
      "type": "object",
      "additionalProperties": { "type": "string" },
      "description": "A dictionary of default dynamic variables used in the model"
    }
  }
},
          "prices": {
            "type": "object",
            "description": "Pricing details for available models",
            "properties": {
              "gpt-5": {
                "type": "number",
                "format": "float",
                "description": "Price for gpt-5 model"
              },
              "gpt-5-mini": {
                "type": "number",
                "format": "float",
                "description": "Price for gpt-5-mini model"
              },
              "gpt-5-nano": {
                "type": "number",
                "format": "float",
                "description": "Price for gpt-5-nano model"
              },
              "gpt-4o": {
                "type": "number",
                "format": "float",
                "description": "Price for gpt-4o model"
              },
              "gpt-4.1": {
                "type": "number",
                "format": "float",
                "description": "Price for gpt-4.1 model"
              },
              "gpt-4.1-mini": {
                "type": "number",
                "format": "float",
                "description": "Price for gpt-4.1-mini model"
              },
              "gpt-4.1-nano": {
                "type": "number",
                "format": "float",
                "description": "Price for gpt-4.1-nano model"
              },
              "gpt-4o-mini": {
                "type": "number",
                "format": "float",
                "description": "Price for gpt-4o-mini model"
              },
              "gpt-4o-realtime": {
                "type": "number",
                "format": "float",
                "description": "Price for gpt-4o-realtime model"
              },
              "gpt-4o-mini-realtime": {
                "type": "number",
                "format": "float",
                "description": "Price for gpt-4o-mini-realtime model"
              },
              "claude-4o-sonnet": {
                "type": "number",
                "format": "float",
                "description": "Price for claude-4o-sonnet model"
              },
              "claude-3.7-sonnet": {
                "type": "number",
                "format": "float",
                "description": "Price for claude-3.7-sonnet model"
              },
              "claude-3.5-haiku": {
                "type": "number",
                "format": "float",
                "description": "Price for claude-3.5-haiku model"
              },
              "gemini-2.0-flash": {
                "type": "number",
                "format": "float",
                "description": "Price for gemini-2.0-flash model"
              },
              "gemini-2.0-flash-lite": {
                "type": "number",
                "format": "float",
                "description": "Price for gemini-2.0-flash-lite model"
              },
              "gemini-2.5-flash": {
                "type": "number",
                "format": "float",
                "description": "Price for gemini-2.5-flash model"
              },
              "gemini-2.5-flash-lite": {
                "type": "number",
                "format": "float",
                "description": "Price for gemini-2.5-flash-lite model"
              }
            }
          }
        }
      },
      "UpdateAgentRequest": {
        "type": "object",
        "properties": {
          "agent_name": {
            "type": "string",
            "description": "The name of the agent, used for reference.",
            "nullable": true,
            "example": "Jarvis"
          },
          "voice_id": {
            "type": "string",
            "description": "Unique voice ID used for the agent.",
            "example": "11labs-Adrian"
          },
          "voice_temperature": {
            "type": "number",
            "minimum": 0,
            "maximum": 2,
            "description": "Controls voice stability for ElevenLabs voices. Lower is more stable, higher is more variant. Defaults to 1.",
            "example": 1
          },
          "voice_speed": {
            "type": "number",
            "minimum": 0.5,
            "maximum": 2,
            "description": "Controls voice speed. Lower is slower, higher is faster. Defaults to 1.",
            "example": 1
          },
          "volume": {
            "type": "number",
            "minimum": 0,
            "maximum": 2,
            "description": "Controls agent volume. Lower is quieter, higher is louder. Defaults to 1.",
            "example": 1
          },
          "responsiveness": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "description": "Controls agent responsiveness. Lower is slower, higher is faster. Defaults to 1.",
            "example": 1
          },
          "interruption_sensitivity": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "description": "Controls sensitivity to user interruptions. Lower is harder to interrupt, higher is easier. Defaults to 1.",
            "example": 1
          },
           "pronunciation_dictionary": {
            "type": "array",
            "description":"A list of words / phrases and their pronunciation to be used to guide the audio synthesize for consistent pronunciation. Currently only supported for English & 11labs voices. Set to null to remove pronunciation dictionary from this agent.",
            "items": {
              "type": "object",
              "properties":{
                "word":{
                  "type":"string",
                  "description":"The string of word / phrase to be annotated with pronunciation.",
                  "example":"actually"
                },
                "alphabet":{
                  "type":"string",
                  "description":"The phonetic alphabet to be used for pronunciation.",
                  "enum":["cmu","ipa"]

                },
                "phoneme":{
                  "type":"string",
                  "description":"Pronunciation of the word in the format of a IPA / CMU pronunciation.",
                  "example":"ˈæktʃuəli"
                }
              }
            },
            "nullable": true
          },
          "enable_backchannel": {
            "type": "boolean",
            "description": "Enables backchannel responses (e.g., 'yeah', 'uh-huh'). Defaults to false.",
            "example": true
          },
          "backchannel_frequency": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "description": "Controls backchannel frequency when enabled. Lower is less frequent, higher is more frequent. Defaults to 0.8.",
            "example": 0.9
          },
          "backchannel_words": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of backchannel words. Defaults apply if not set.",
            "nullable": true,
            "example": ["yeah", "uh-huh"]
          },
          "vocab_specialization": {
            "type": "string",
            "enum": ["general", "medical"],
            "description": "Vocabulary set for transcription (English only). Defaults to general.",
            "example": "general"
          },
          "allow_user_dtmf": {
            "type": "boolean",
            "description": "If set to true, DTMF input will be accepted and processed. If false, any DTMF input will be ignored. Default to true.",
            "example": true
          },
          "user_dtmf_options": {
            "type": "object",
            "description": "DTMF options for the agent.",
            "properties":{
              "digit_limit":{
                "type":"number",
                "description":"The maximum number of digits allowed in the user's DTMF (Dual-Tone Multi-Frequency) input per turn. Once this limit is reached, the input is considered complete and a response will be generated immediately."
              },
              "timeout_ms":{
                "type":"number",
                "description":"The time (in milliseconds) to wait for user DTMF input before timing out. The timer resets with each digit received."
              },
              "termination_key":{
                "type":"string",
                "description":"A single key that signals the end of DTMF input. Acceptable values include any digit (0–9), the pound/hash symbol (#), or the asterisk (*)."
              }
            },
            "nullable": true
          },
          "denoising_mode": {
            "type": "string",
            "enum": ["noise-cancellation", "noise-and-background-speech-cancellation"],
            "description": "Denoising mode for audio. Defaults to noise-cancellation.",
            "example": "noise-cancellation"
          },
          "reminder_trigger_ms": {
            "type": "number",
            "minimum": 0,
            "description": "Triggers reminder after user silence duration (ms). Defaults to 10000.",
            "example": 10000
          },
          "reminder_max_count": {
            "type": "integer",
            "minimum": 0,
            "description": "Maximum number of reminders for unresponsive user. Defaults to 1.",
            "example": 2
          },
          "ambient_sound": {
            "type": "string",
            "enum": [
              "coffee-shop",
              "convention-hall",
              "summer-outdoor",
              "mountain-outdoor",
              "static-noise",
              "call-center"
            ],
            "description": "Ambient sound for realistic call experience. Set to null to remove.",
            "nullable": true
          },
          "ambient_sound_volume": {
            "type": "number",
            "minimum": 0,
            "maximum": 2,
            "description": "Controls ambient sound volume. Lower is quieter, higher is louder. Defaults to 1.",
            "example": 1
          },
          "language": {
            "type": "string",
            "enum": [
              "en-US",
              "en-IN",
              "en-GB",
              "en-AU",
              "en-NZ",
              "de-DE",
              "es-ES",
              "es-419",
              "hi-IN",
              "fr-FR",
              "fr-CA",
              "ja-JP",
              "pt-PT",
              "pt-BR",
              "zh-CN",
              "ru-RU",
              "it-IT",
              "ko-KR",
              "nl-NL",
              "nl-BE",
              "pl-PL",
              "tr-TR",
              "th-TH",
              "vi-VN",
              "ro-RO",
              "bg-BG",
              "ca-ES",
              "da-DK",
              "fi-FI",
              "el-GR",
              "hu-HU",
              "id-ID",
              "no-NO",
              "sk-SK",
              "sv-SE",
              "multi"
            ],
            "description": "Language and dialect for speech recognition. Defaults to en-US.",
            "example": "en-US"
          },
          
          "boosted_keywords": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Keywords to bias transcriber model. Set to null to remove.",
            "nullable": true,
            "example": ["aicall", "kroger"]
          },
          
          
          "normalize_for_speech": {
            "type": "boolean",
            "description": "Normalizes text to spoken form for consistent synthesis.",
            "example": true
          },
          "end_call_after_silence_ms": {
            "type": "integer",
            "minimum": 10000,
            "description": "Ends call after user silence duration (ms). Defaults to 600000.",
            "example": 600000
          },
          "max_call_duration_ms": {
            "type": "integer",
            "minimum": 60000,
            "maximum": 7200000,
            "description": "Maximum call duration (ms). Defaults to 3600000.",
            "example": 3600000
          },
          "voicemail_option": {
            "type": "object",
            "description": "Voicemail detection settings. Set to null to disable.",
            "nullable": true,
            "properties": {
              "action": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Type of voicemail action (e.g., static_text, hangup)",
                    "example": "static_text"
                  },
                  "text": {
                    "type": "string",
                    "description": "Text for voicemail prompt, if applicable",
                    "example": "Please give us a callback tomorrow at 10am."
                  }
                }
              }
            }
          },
        
  "analysis_data": {
    "type": "array",
    "items": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "string",
              "description": "The data type of the analysis field, set to string."
            },
            "name": {
              "type": "string",
              "description": "The name of the analysis field.",
              "examples": ["sentiment", "key_topic", "action_item"]
            },
            "description": {
              "type": "string",
              "description": "A description of what the analysis field represents.",
              "examples": ["Sentiment of the call", "Key topic discussed", "Action item assigned"]
            },
            "examples": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Example values for the analysis field.",
              "nullable": true,
              "examples": [
                ["happy customer", "urgent issue"],
                ["pricing", "product feedback"],
                ["follow-up call", "send email"]
              ]
            }
          },
          "required": ["type", "name", "description"]
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "enum",
              "description": "The data type of the analysis field, set to enum."
            },
            "name": {
              "type": "string",
              "description": "The name of the analysis field.",
              "examples": ["sentiment", "status", "priority"]
            },
            "description": {
              "type": "string",
              "description": "A description of what the analysis field represents.",
              "examples": ["Sentiment of the call", "Status of the call", "Priority level"]
            },
            "choices": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Possible values for the analysis field.",
              "nullable": true,
              "examples": [
                ["positive", "negative", "neutral"],
                ["successful", "unsuccessful", "pending"],
                ["high", "medium", "low"]
              ]
            }
          },
          "required": ["type", "name", "description"]
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "boolean",
              "description": "The data type of the analysis field, set to boolean."
            },
            "name": {
              "type": "string",
              "description": "The name of the analysis field.",
              "examples": ["is_urgent", "is_resolved"]
            },
            "description": {
              "type": "string",
              "description": "A description of what the analysis field represents.",
              "examples": ["Whether the issue is urgent", "Whether the issue is resolved"]
            }
          },
          "required": ["type", "name", "description"]
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "number",
              "description": "The data type of the analysis field, set to number."
            },
            "name": {
              "type": "string",
              "description": "The name of the analysis field.",
              "examples": ["call_duration", "customer_rating"]
            },
            "description": {
              "type": "string",
              "description": "A description of what the analysis field represents.",
              "examples": ["Duration of the call in minutes", "Customer satisfaction rating"]
            }
          },
          "required": ["type", "name", "description"]
        }
      ],
      "description": "Configuration for a single post-call analysis field."
    },
    "description": "Additional data to extract post-call. Available after call ends.",
    "nullable": true
  },
          "ring_duration_ms": {
            "type": "integer",
            "minimum": 5000,
            "maximum": 90000,
            "description": "Ring duration for calls (ms). Defaults to 30000.",
            "example": 30000
          }
        }
      },
      "UpdateAgentResponse": {
        "type": "object",
        "required": ["success", "message", "data", "voice_list", "ghl_data"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the request was successful",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Message describing the result of the request",
            "example": "get agent detail"
          },
          "data": {
            "type": "object",
            "required": [
              "pk",
              "agent_name",
              "agent_id",
              "voice_id",
              "language",
              "interruption_sensitivity",
              "voicemail",
              "voicemail_message",
              "end_call_after_silence",
              "max_call_duration",
              "reminder_trigger",
              "ambient_sound",
              "analysis_data",
              "llm",
              "voice_speed",
              "voice_temperature",
              "volume",
              "enable_backchannel",
              "normalize_for_speech",
              "enable_transcription_formatting",
              "reminder_trigger_ms",
              "reminder_max_count",
              "boosted_keywords",
              "ambient_sound_volume",
              "voicemail_detection_timeout_ms",
              "begin_message_delay_ms",
              "updated_at",
              "is_locked",
              "calendar_id",
              "inbound_appoitment",
              "ring_duration_sec",
              "stt_mode",
              "backchannel_words",
              "backchannel_frequency",
              "call_scheduling",
              "agent_crm_type",
              "voicemail_option"
            ],
            "properties": {
              "pk": {
                "type": "integer",
                "description": "Primary key for the AI call agent",
                "example": 521
              },
              "agent_name": {
                "type": "string",
                "description": "Name of the AI call agent",
                "example": "add_agent_name"
              },
              "agent_id": {
                "type": "string",
                "description": "Unique identifier for the AI call agent",
                "example": "agent_aa2c4c2895abe6ab7c0e89b607"
              },
              "voice_id": {
                "type": "string",
                "description": "Identifier for the voice used by the agent",
                "example": "11labs-Marissa"
              },
              "language": {
                "type": "string",
                "description": "Language code or type (e.g., en-US, multi)",
                "example": "en-US"
              },
              "interruption_sensitivity": {
                "type": "string",
                "description": "Sensitivity level for interruptions",
                "example": "1.0"
              },
              "pronunciation_dictionary": {
            "type": "array",
            "items": {
              "type": "object",
              "properties":{
                "word":{
                  "type":"string",
                  "description":"",
                  "example":"hello"
                },
                "alphabet":{
                  "type":"string",
                  "description":"",
                  "enum":["CMU","IPA"]

                },
                "phoneme":{
                  "type":"string",
                  "description":""
                }
              }
            },
            "description": "List of words/phrases with pronunciations for consistent synthesis. Set to null to remove.",
            "nullable": true
          },
           "vocab_specialization": {
            "type": "string",
            "enum": ["general", "medical"],
            "description": "Vocabulary set for transcription (English only). Defaults to general.",
            "example": "general"
          },
          "allow_user_dtmf": {
            "type": "boolean",
            "description": "If set to true, DTMF input will be accepted and processed. If false, any DTMF input will be ignored. Default to true.",
            "example": true
          },
          "user_dtmf_options": {
            "type": "object",
            "description": "DTMF options for the agent.",
            "properties":{
              "digit_limit":{
                "type":"number",
                "description":"The maximum number of digits allowed in the user's DTMF (Dual-Tone Multi-Frequency) input per turn. Once this limit is reached, the input is considered complete and a response will be generated immediately."
              },
              "timeout_ms":{
                "type":"number",
                "description":"The time (in milliseconds) to wait for user DTMF input before timing out. The timer resets with each digit received."
              },
              "termination_key":{
                "type":"string",
                "description":"A single key that signals the end of DTMF input. Acceptable values include any digit (0–9), the pound/hash symbol (#), or the asterisk (*)."
              }
            },
            "nullable": true
          },
          "denoising_mode": {
            "type": "string",
            "enum": ["noise-cancellation", "noise-and-background-speech-cancellation"],
            "description": "Denoising mode for audio. Defaults to noise-cancellation.",
            "example": "noise-cancellation"
          },
              "voicemail": {
                "type": "boolean",
                "description": "Indicates if voicemail is enabled",
                "example": true
              },
              "voicemail_message": {
                "type": "string",
                "description": "Voicemail message content",
                "nullable": true,
                "example": null
              },
              "end_call_after_silence": {
                "type": "integer",
                "description": "Duration of silence before ending the call (in seconds)",
                "example": 10
              },
              "max_call_duration": {
                "type": "integer",
                "description": "Maximum call duration (in minutes)",
                "example": 10
              },
              "reminder_trigger": {
                "type": "integer",
                "description": "Time before triggering a reminder (in seconds)",
                "example": 10
              },
              "ambient_sound": {
                "type": "string",
                "description": "Ambient sound setting",
                "nullable": true,
                "example": null
              },
              "analysis_data": {
                "type": "array",
                "description": "Data for call analysis",
                "items": {
                  "type": "string"
                },
                "example": []
              },
              "llm": {
                "type": "integer",
                "description": "Identifier for the language model used",
                "example": 527
              },
              "voice_speed": {
                "type": "number",
                "format": "float",
                "description": "Speed of the voice",
                "example": 1.0
              },
              "voice_temperature": {
                "type": "number",
                "format": "float",
                "description": "Temperature setting for voice generation",
                "example": 1.0
              },
              "volume": {
                "type": "number",
                "format": "float",
                "description": "Volume level for the voice",
                "example": 1.0
              },
              "enable_backchannel": {
                "type": "boolean",
                "description": "Indicates if backchannel responses are enabled",
                "example": true
              },
              "normalize_for_speech": {
                "type": "boolean",
                "description": "Indicates if speech normalization is enabled",
                "example": false
              },
              "enable_transcription_formatting": {
                "type": "boolean",
                "description": "Indicates if transcription formatting is enabled",
                "example": true
              },
              "reminder_trigger_ms": {
                "type": "integer",
                "description": "Reminder trigger time in milliseconds",
                "example": 10000
              },
              "reminder_max_count": {
                "type": "integer",
                "description": "Maximum number of reminders",
                "example": 1
              },
              "boosted_keywords": {
                "type": "array",
                "description": "List of keywords to boost in processing",
                "items": {
                  "type": "string"
                },
                "example": []
              },
              "ambient_sound_volume": {
                "type": "number",
                "format": "float",
                "description": "Volume level for ambient sound",
                "example": 1.0
              },
              "voicemail_detection_timeout_ms": {
                "type": "integer",
                "description": "Timeout for voicemail detection in milliseconds",
                "example": 5000
              },
              "begin_message_delay_ms": {
                "type": "integer",
                "description": "Delay before starting message in milliseconds",
                "example": 0
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the agent was last updated",
                "example": "2025-08-13T09:41:44.564571Z"
              },
              "is_locked": {
                "type": "boolean",
                "description": "Indicates if the agent is locked",
                "example": false
              },
              "calendar_id": {
                "type": "string",
                "description": "Identifier for associated calendar",
                "nullable": true,
                "example": null
              },
              "inbound_appoitment": {
                "type": "boolean",
                "description": "Indicates if inbound appointment scheduling is enabled",
                "example": false
              },
              "ring_duration_sec": {
                "type": "integer",
                "description": "Ring duration in seconds",
                "example": 30
              },
              "stt_mode": {
                "type": "string",
                "description": "Speech-to-text mode (e.g., fast)",
                "example": "fast"
              },
              "backchannel_words": {
                "type": "string",
                "description": "Words used for backchannel responses",
                "nullable": true,
                "example": null
              },
              "backchannel_frequency": {
                "type": "number",
                "format": "float",
                "description": "Frequency of backchannel responses",
                "example": 0.8
              },
              "call_scheduling": {
                "type": "boolean",
                "description": "Indicates if call scheduling is enabled",
                "example": false
              },
              "agent_crm_type": {
                "type": "string",
                "description": "Type of CRM integration for the agent",
                "nullable": true,
                "example": null
              },
              "voicemail_option": {
                "type": "object",
                "description": "Voicemail options for the agent",
                "properties": {
                  "action": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Type of voicemail action (e.g., hangup)",
                        "example": "hangup"
                      }
                    }
                  }
                }
              }
            }
          },
          "voice_list": {
            "type": "array",
            "description": "List of available voices for the agent",
            "items": {
              "type": "object",
              "required": ["id", "voice_name", "voice_id", "avatar_url", "preview_audio_url", "created_at", "updated_at"],
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Unique identifier for the voice",
                  "example": 3
                },
                "voice_name": {
                  "type": "string",
                  "description": "Name of the voice",
                  "example": "aicall_ryan"
                },
                "voice_id": {
                  "type": "string",
                  "description": "Unique identifier for the voice",
                  "example": "custom_voice_937c75901acb54b42837d3dafa"
                },
                "preview_audio_url": {
                  "type": "string",
                  "format": "uri",
                  "description": "URL to the voice's preview audio",
                  "example": "https://aicall-utils-public.s3.us-west-2.amazonaws.com/custom_voice_937c75901acb54b42837d3dafa.mp3"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Timestamp when the voice was created",
                  "example": "2025-08-01T16:31:51.688674Z"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Timestamp when the voice was last updated",
                  "example": "2025-08-01T16:31:51.688683Z"
                }
              }
            }
          },
          "ghl_data": {
            "type": "object",
            "required": ["ghl_connection", "ghl_book_meeting", "inbound_appoitment", "calendar_id"],
            "properties": {
              "ghl_connection": {
                "type": "boolean",
                "description": "Indicates if GoHighLevel is connected",
                "example": true
              },
              "ghl_book_meeting": {
                "type": "boolean",
                "description": "Indicates if meeting booking is enabled",
                "example": true
              },
              "inbound_appoitment": {
                "type": "boolean",
                "description": "Indicates if inbound appointment scheduling is enabled",
                "example": false
              },
              "calendar_id": {
                "type": "string",
                "description": "Identifier for associated calendar",
                "nullable": true,
                "example": null
              }
            }
          }
        }
      },
      "CampaignItem": {
  "type": "object",
  "properties": {
    "id": {
      "type": "string",
      "description": "Unique identifier for the campaign",
      "example": "campdece6857"
    },
    "name": {
      "type": "string",
      "description": "Name of the campaign",
      "example": "Rell (test)"
    },
    "direction": {
      "type": "string",
      "description": "Direction of the call campaign",
      "example": "Outbound"
    },
    "new_agent": {
      "type": ["string", "null"],
      "description": "Assigned agent name",
      "example": "Financial"
    },
    "contact_list": {
      "type": ["string", "null"],
      "description": "Reference to the contact list used in the campaign",
      "example": null
    },
    "knowledge_base": {
      "type": ["string", "null"],
      "description": "Knowledge base linked to the campaign",
      "example": null
    },
    "calling_number": {
      "type": "string",
      "description": "Primary phone number used for the campaign",
      "example": "+18446020950"
    },
    "status": {
      "type": "string",
      "description": "Current status of the campaign",
      "example": "paused"
    },
    "total_bugget": {
      "type": "number",
      "description": "Total budget assigned to the campaign",
      "example": 60
    },
    "bugget_left": {
      "type": "string",
      "description": "Remaining budget as a string value",
      "example": "60.0000"
    },
    "status_choices": {
      "type": "array",
      "description": "Possible status options for the campaign",
      "items": {
        "type": "string"
      },
      "example": ["active", "paused", "completed"]
    },
    "calling_number_pool": {
      "type": "array",
      "description": "List of available calling numbers",
      "items": {
        "type": "string"
      },
      "example": ["+17023600026", "+17023600027"]
    },
    "rotate_number_after_calls": {
      "type": "integer",
      "description": "Number of calls after which the number is rotated",
      "example": 1
    },
    "release_buyed_when": {
      "type": "string",
      "description": "Defines when to release purchased numbers",
      "example": "subscription_complete"
    },
    "number_rotation": {
      "type": "boolean",
      "description": "Whether number rotation is enabled",
      "example": false
    },
    "created_at": {
      "type": "string",
      "format": "date-time",
      "description": "Creation timestamp",
      "example": "2025-08-23T10:54:50.133959Z"
    },
    "updated_at": {
      "type": "string",
      "format": "date-time",
      "description": "Last updated timestamp",
      "example": "2025-08-23T15:53:15.089678Z"
    }
  }
      },
      "CampaignData": {
  "type": "object",
  "properties": {
    "total_count": {
      "type": "number",
      "description": "Total number of matching campaigns",
      "example": 257
    },
    "total_page": {
      "type": "number",
      "description": "Total number of pages",
      "example": 6
    },
    "Current_page_no": {
      "type": "number",
      "description": "Current page number",
      "example": 1
    },
    "next_page_number": {
      "type": ["number", "null"],
      "description": "Next page number if available",
      "example": 2
    },
    "previous_page_number": {
      "type": ["number", "null"],
      "description": "Previous page number if available",
      "example": null
    },
    "page_size": {
      "type": "number",
      "description": "Number of items per page",
      "example": 50
    },
    "data": {
      "type": "array",
      "description": "List of campaign items",
      "items": {
        "$ref": "#/components/schemas/CampaignItem"
      }
    }
  }
      },
      "CreateCampaignRequest": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Name of the campaign to be created",
        "example": "Summer Sales 2025"
      },
      "new_agent": {
        "type": "integer",
        "description": "ID of the agent assigned to the campaign",
        "example": 123
      },
      "direction": {
        "type": "string",
        "description": "Direction of the campaign, either 'Inbound' or 'Outbound'",
        "enum": ["Inbound", "Outbound"],
        "example": "Outbound"
      },
      "calling_number": { 
        "type": "string",
        "description": "Phone number used for calls",
        "example": "+18446020950"
      },
      "tags": {
        "type": "array",
        "description": "List of tag IDs to associate with the campaign",
        "items": {
          "type": "integer"
        },
        "example": [1, 2]
      },
      "enable_number_rotation": {
        "type": "boolean",
        "description": "Toggle to enable or disable number rotation for calls",
        "example": false
      },
      "number_dict": {
      "type": "object",
      "description": "Whether number rotation is enabled",
      "example": {}
    },
      "total_bugget": {
        "type": "number",
        "format": "float",
        "description": "Total budget (in minutes) allocated for the campaign",
        "example": 60
      },
      "start_date": {
        "type": "string",
        "format": "date",
        "description": "Start date of the campaign in YYYY-MM-DD format",
        "example": "2025-08-30"
      },
      "start_time": {
        "type": "string",
        "format": "time",
        "description": "Start time of the campaign in HH:mm:ss format",
        "example": "10:00:00"
      },
      "end_date": {
        "type": "string",
        "format": "date",
        "description": "End date of the campaign in YYYY-MM-DD format",
        "example": "2025-08-30"
      },
      "end_time": {
        "type": "string",
        "format": "time",
        "description": "End time of the campaign in HH:mm:ss format",
        "example": "17:00:00"
      }
    },
    "required": [
      "name",
      "new_agent",
      "direction",
      "calling_number",
      "tags",
      "enable_number_rotation",
      "total_bugget",
      "start_date",
      "start_time",
      "end_date",
      "end_time"
    ]
      },
      "CreateCampaign": {
    "type": "object",
    "properties": {
      "success": {
        "type": "boolean",
        "description": "Indicates whether the campaign was created successfully",
        "example": true
      },
      "message": {
        "type": "string",
        "description": "A message confirming the status of the campaign creation",
        "example": "campaign created successfully"
      },
      "data": {
        "type": "object",
        "properties": {
          "campaign": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the campaign",
                "example": "Rell (test)"
              },
              "new_agent": {
                "type": "integer",
                "description": "Unique ID of the agent selected for the campaign",
                "example": 527
              },
              "direction": {
                "type": "string",
                "description": "The call direction (either 'Outbound' or 'Inbound')",
                "example": "Outbound"
              },
              "contact_list": {
                "type": "object",
                "description": "The contact list associated with the campaign (if available)",
                "example": null
              },
              "knowledge_base": {
                "type": "object",
                "description": "The knowledge base associated with the campaign (if available)",
                "example": null
              },
              "calling_number": {
                "type": "string",
                "description": "The calling number assigned to the campaign",
                "example": "+18446020950"
              },
              "start_date": {
                "type": "string",
                "format": "date",
                "description": "The start date of the campaign",
                "example": "2025-08-24"
              },
              "start_time": {
                "type": "string",
                "format": "time",
                "description": "The start time of the campaign",
                "example": "11:00:00"
              },
              "end_time": {
                "type": "string",
                "format": "time",
                "description": "The end time of the campaign",
                "example": "12:30:00"
              },
              "saturday": {
                "type": "boolean",
                "description": "Indicates if the campaign is scheduled for Saturdays",
                "example": false
              },
              "sunday": {
                "type": "boolean",
                "description": "Indicates if the campaign is scheduled for Sundays",
                "example": false
              },
              "total_bugget": {
                "type": "number",
                "description": "Total budget of the campaign in minutes",
                "example": 60
              },
              "bugget_left": {
                "type": "string",
                "description": "Remaining budget in minutes for the campaign",
                "example": "60.0000"
              },
              "tags": {
                "type": "array",
                "description": "List of tags associated with the campaign",
                "example": [1]
              }
            }
          }
        }
      }
    }
      },
      "CreateQuickCampaignRequest": {
  "type": "object",
  "properties": {
    "name": {
      "type": "string",
      "description": "Name of the quick campaign",
      "example": "Quick Follow-up Campaign"
    },
    "new_agent": {
      "type": "integer",
      "description": "ID of the AI agent assigned to the campaign",
      "example": 123
    },
    "calling_number": {
      "type": "string",
      "description": "Phone number used for outbound calls",
      "example": "+18446020950"
    },
    "enable_number_rotation": {
      "type": "boolean",
      "description": "Whether number rotation is enabled",
      "example": false
    },
    "number_dict": {
      "type": "object",
      "description": "Whether number rotation is enabled",
      "example": {}
    },
    
    "direction": {
      "type": "string",
      "description": "Call direction",
      "enum": ["Outbound", "Inbound"],
      "example": "Outbound"
    }
  },
  "required": [
    "name",
    "new_agent",
    "calling_number",
    "enable_number_rotation",
    "direction"
  ]
      },
      "CreateQuickCampaign": {
    "type": "object",
    "properties": {
      "success": {
        "type": "boolean",
        "description": "Indicates whether the quick campaign was created successfully",
        "example": true
      },
      "message": {
        "type": "string",
        "description": "A message confirming the status of the quick campaign creation",
        "example": "quick campaign created"
      },
      "data": {
        "type": "object",
        "properties": {
          "quick_campaign": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for the quick campaign",
                "example": "quickcamp25fdd9d6"
              },
              "name": {
                "type": "string",
                "description": "Name of the quick campaign",
                "example": "ja(test)"
              },
              "calling_number": {
                "type": "string",
                "description": "The calling number assigned to the quick campaign",
                "example": "+15076371471"
              },
              "status": {
                "type": "string",
                "description": "The current status of the campaign (e.g., 'running', 'paused')",
                "example": "running"
              },
              "direction": {
                "type": "string",
                "description": "The call direction for the quick campaign (either 'Outbound' or 'Inbound')",
                "example": "Outbound"
              },
              "is_rescheduled": {
                "type": "boolean",
                "description": "Indicates whether the campaign is rescheduled",
                "example": false
              },
              "number_rotation": {
                "type": "boolean",
                "description": "Indicates whether number rotation is enabled for the quick campaign",
                "example": false
              },
              "rotate_number_after_calls": {
                "type": "number",
                "description": "Number of calls after which to rotate the calling number",
                "example": 1
              },
              "release_buyed_when": {
                "type": "string",
                "description": "Specifies when the purchased numbers should be released",
                "example": "never"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the quick campaign was created",
                "example": "2025-08-23T12:42:49.768952Z"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the quick campaign was last updated",
                "example": "2025-08-23T12:42:49.768961Z"
              },
              "agent": {
                "type": "object",
                "description": "The agent assigned to the quick campaign (if available)",
                "example": null
              },
              "new_agent": {
                "type": "integer",
                "description": "Unique ID of the agent selected for the quick campaign",
                "example": 542
              },
              "knowledge_base": {
                "type": "object",
                "description": "The knowledge base associated with the quick campaign (if available)",
                "example": null
              },
              "calling_number_pool": {
                "type": "array",
                "description": "List of calling numbers available for the quick campaign",
                "example": []
              }
            }
          }
        }
      }
    }
      },
      "UpdateCampaignRequest": {
  "type": "object",
  "properties": {
    "success": {
      "type": "boolean",
      "description": "Indicates whether the update was successful",
      "example": true
    },
    "message": {
      "type": "string",
      "description": "Descriptive message for the API response",
      "example": "Campaign updated successfully"
    },
    "data": {
      "type": "object",
      "description": "Contains updated campaign information",
      "properties": {
        "campaign": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique campaign ID",
              "example": "campc005bf8a"
            },
            "name": {
              "type": "string",
              "description": "Name of the campaign",
              "example": "Testing(amanEditCampaign)"
            },
            "direction": {
              "type": "string",
              "description": "Direction of the campaign (Inbound/Outbound)",
              "example": "Inbound"
            },
            "agent": {
              "type": ["string", "null"],
              "description": "Agent assigned to the campaign",
              "example": null
            },
            "new_agent": {
              "type": ["integer", "null"],
              "description": "New agent ID assigned to the campaign",
              "example": 527
            },
            "contact_list": {
              "type": ["string", "null"],
              "description": "Associated contact list",
              "example": null
            },
            "knowledge_base": {
              "type": ["string", "null"],
              "description": "Associated knowledge base (if any)",
              "example": null
            },
            "calling_number": {
              "type": "string",
              "description": "Calling number used in campaign",
              "example": "+911149816890"
            },
            "start_date": {
              "type": ["string", "null"],
              "format": "date",
              "description": "Start date of the campaign",
              "example": null
            },
            "start_time": {
              "type": ["string", "null"],
              "format": "time",
              "description": "Start time of the campaign",
              "example": null
            },
            "end_time": {
              "type": ["string", "null"],
              "format": "time",
              "description": "End time of the campaign",
              "example": null
            },
            "total_bugget": {
              "type": "number",
              "format": "float",
              "description": "Total budget assigned",
              "example": 158
            },
            "bugget_left": {
              "type": "string",
              "description": "Remaining budget (in string format)",
              "example": "158.0000"
            },
            "saturday": {
              "type": "boolean",
              "description": "Whether the campaign runs on Saturdays",
              "example": false
            },
            "sunday": {
              "type": "boolean",
              "description": "Whether the campaign runs on Sundays",
              "example": false
            },
            "status": {
              "type": "string",
              "description": "Current campaign status",
              "example": "active"
            },
            "priority": {
              "type": "integer",
              "description": "Campaign priority",
              "example": 1
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "Campaign creation timestamp",
              "example": "2025-08-23T10:44:41.275526Z"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "description": "Last update timestamp",
              "example": "2025-08-23T18:16:15.772412Z"
            }
          },
          "required": ["id", "name", "status"]
        }
      }
    }
  },
  "required": ["success", "message", "data"]
      },
      "UpdateCampaignResponse": {
  "type": "object",
  "properties": {
    "success": {
      "type": "boolean",
      "example": true,
      "description": "Whether the update was successful"
    },
    "message": {
      "type": "string",
      "example": "Campaign updated successfully",
      "description": "Descriptive message about the result"
    },
    "data": {
      "type": "object",
      "properties": {
        "campaign": {
          "type": "object",
          "properties": {
            "id": { "type": "string", "example": "campc005bf8a" },
            "name": { "type": "string", "example": "TesTing(aman)" },
            "direction": { "type": "string", "example": "Inbound" },
            "agent": { "type": ["integer", "null"], "example": null },
            "new_agent": { "type": ["integer", "null"], "example": 527 },
            "contact_list": { "type": ["string", "null"], "example": null },
            "knowledge_base": { "type": ["string", "null"], "example": null },
            "calling_number": { "type": "string", "example": "+15076371471" },
            "start_date": { "type": ["string", "null"], "format": "date", "example": null },
            "start_time": { "type": ["string", "null"], "format": "time", "example": null },
            "end_time": { "type": ["string", "null"], "format": "time", "example": null },
            "total_bugget": { "type": "number", "format": "float", "example": 58 },
            "bugget_left": { "type": "string", "example": "58.0000" },
            "saturday": { "type": "boolean", "example": false },
            "sunday": { "type": "boolean", "example": false },
            "status": { "type": "string", "example": "paused" },
            "priority": { "type": "integer", "example": 1 },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "example": "2025-08-23T10:44:41.275526Z"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "example": "2025-08-23T17:47:12.678754Z"
            }
          }
        }
      }
    }
  }
      },
      "DailyCampaignGraph": {
  "type": "object",
  "properties": {
    "date": {
      "type": "string",
      "format": "date",
      "description": "Date of the campaign analytics",
      "example": "2025-08-23"
    },
    "hours": {
      "type": "array",
      "items": { "type": "integer" },
      "description": "Hourly time intervals (0–23)",
      "example": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
    },
    "credit_deductions": {
      "type": "array",
      "items": { "type": "integer" },
      "description": "Credits used per hour",
      "example": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    },
    "credit_deductions_change": {
      "type": "array",
      "items": { "type": "integer" },
      "description": "Change in credit usage compared to the previous period",
      "example": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    },
    "campaign_results": {
      "type": "array",
      "items": { "type": "integer" },
      "description": "Campaign results per hour",
      "example": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    },
    "campaign_results_change": {
      "type": "array",
      "items": { "type": "integer" },
      "description": "Change in campaign results compared to the previous period",
      "example": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }
  }
      },
      "CampaignAnalytics": {
  "type": "object",
  "properties": {
    "total_count": {
      "type": "integer",
      "description": "Total number of analytics records",
      "example": 1
    },
    "total_page": {
      "type": "integer",
      "description": "Total number of pages",
      "example": 1
    },
    "current_page_no": {
      "type": "integer",
      "description": "Current page number",
      "example": 1
    },
    "next_page_number": {
      "type": ["integer", "null"],
      "description": "Next page number if available",
      "example": null
    },
    "previous_page_number": {
      "type": ["integer", "null"],
      "description": "Previous page number if available",
      "example": null
    },
    "page_size": {
      "type": "integer",
      "description": "Number of records per page",
      "example": 10
    },
    "data": {
      "type": "array",
      "description": "List of campaign analytics data",
      "items": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "example": 5157 },
          "calling_number": { "type": "string", "example": "+911149816890" },
          "sid": { "type": "string", "example": "call_4be2700848d9cf0cbcb525393d8" },
          "contact_id": { "type": ["string", "null"], "example": null },
          "contact_number": { "type": "string", "example": "+918570904784" },
          "email": { "type": ["string", "null"], "example": null },
          "first_name": { "type": ["string", "null"], "example": null },
          "last_name": { "type": ["string", "null"], "example": null },
          "company_name": { "type": ["string", "null"], "example": null },
          "industry": { "type": ["string", "null"], "example": null },
          "address": { "type": ["string", "null"], "example": null },
          "custom1": { "type": ["string", "null"], "example": null },
          "custom2": { "type": ["string", "null"], "example": null },
          "custom3": { "type": ["string", "null"], "example": null },
          "custom4": { "type": ["string", "null"], "example": null },
          "scheduling_charge": { "type": "string", "example": "0.0000" },
          "calender_id": { "type": ["string", "null"], "example": null },
          "appointment_booked": { "type": "boolean", "example": false },
          "call_duration": { "type": "integer", "example": 0 },
          "status": { "type": "string", "example": "dial_no_answer" },
          "improvement_tags": {
            "type": "array",
            "items": { "type": "string" },
            "example": []
          },
          "outcome": { "type": "string", "example": "Unknown" },
          "recording_url": { "type": ["string", "null"], "example": null },
          "recording_file": { "type": ["string", "null"], "example": null },
          "transcription": {
            "type": "array",
            "items": { "type": "string" },
            "example": []
          },
          "transcription_text": { "type": "string", "example": "" },
          "notes": { "type": "string", "example": "" },
          "credit_deduction": { "type": "string", "example": "0.0000" },
          "errors": { "type": "string", "example": "" },
          "response_sentiment": { "type": "string", "example": "NOT_DETECTED" },
          "triggered_by_crm": { "type": "string", "example": "GHL" },
          "dynamic_variables": { "type": ["string", "null"], "example": null },
          "extract_dynamic_variables": { "type": ["string", "null"], "example": null },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-08-08T20:04:34.718079Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-08-08T20:09:11.544410Z"
          },
          "quick_campaign": {
            "type": "string",
            "example": "quickcamp2062236c"
          }
        }
      }
    }
  }
      },
      "CampaignFinalAnalysis": {
  "type": "object",
  "properties": {
    "status_counts": {
      "type": "object",
      "description": "Counts of each call status in the campaign (e.g., AGENT_HANGUP, DIAL_NO_ANSWER)",
      "additionalProperties": {
        "type": "integer"
      },
      "example": {
        "AGENT_HANGUP": 1,
        "DIAL_NO_ANSWER": 1
      }
    },
    "outcome_counts": {
      "type": "object",
      "description": "Counts of each outcome classification (e.g., POSITIVE, NEGATIVE, UNKNOWN)",
      "additionalProperties": {
        "type": "integer"
      },
      "example": {
        "NEGATIVE": 1,
        "UNKNOWN": 1
      }
    },
    "number_of_callbacks": {
      "type": "object",
      "description": "Details or count of scheduled callbacks if any (can be empty)",
      "example": {}
    },
    "cumulative_user_hangups": {
      "type": "array",
      "description": "List of user IDs or identifiers who hung up the call (can be empty)",
      "items": {
        "type": "string"
      },
      "example": []
    },
    "response_sentiment_counts": {
      "type": "object",
      "description": "Count of response sentiments detected during the campaign",
      "additionalProperties": {
        "type": "integer"
      },
      "example": {
        "NOT_DETECTED": 2
      }
    },
    "improvement_tag_counts": {
      "type": "object",
      "description": "Counts of improvement tags used in the campaign",
      "additionalProperties": {
        "type": "integer"
      },
      "example": {
        "NULL": 2
      }
    },
    "analysis_dict": {
      "type": "object",
      "description": "Final summary and aggregated metrics of the campaign",
      "properties": {
        "total_appointment_booked": {
          "type": "integer",
          "description": "Total number of appointments booked in the campaign",
          "example": 0
        },
        "total_calls": {
          "type": "integer",
          "description": "Total number of calls made",
          "example": 2
        },
        "total_connected_calls": {
          "type": "integer",
          "description": "Total number of connected calls",
          "example": 1
        },
        "booking_rate": {
          "type": "number",
          "format": "float",
          "description": "Percentage of booked appointments from connected calls",
          "example": 0.0
        }
      },
      "required": [
        "total_appointment_booked",
        "total_calls",
        "total_connected_calls",
        "booking_rate"
      ]
    }
  },
  "required": [
    "status_counts",
    "outcome_counts",
    "number_of_callbacks",
    "cumulative_user_hangups",
    "response_sentiment_counts",
    "improvement_tag_counts",
    "analysis_dict"
  ]
      },
      "CallbackVoizerFreeAccount": {
  "type": "object",
  "properties": {
    "success": {
      "type": "boolean",
      "description": "Indicates whether the request was successful"
    },
    "agency_id": {
      "type": "string",
      "description": "The unique ID of the agency (e.g., voizerfreeaccount)"
    },
    "scheduled_tasks": {
      "type": "array",
      "description": "List of scheduled tasks associated with the agency",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique ID of the scheduled task"
          },
          "name": {
            "type": "string",
            "description": "The name of the scheduled task"
          },
          "task": {
            "type": "string",
            "description": "The task to be executed"
          },
          "args": {
            "type": "string",
            "description": "Arguments passed to the task (usually a list)"
          },
          "clocked": {
            "type": "object",
            "properties": {
              "clocked_time": {
                "type": "string",
                "format": "date-time",
                "description": "The scheduled time of the task in UTC"
              }
            }
          },
          "enabled": {
            "type": "boolean",
            "description": "Indicates whether the task is enabled or not"
          }
        },
        "required": ["id", "name", "task", "clocked", "enabled"]
      }
    },
    "quick_campaign_results": {
      "type": "array",
      "description": "List of results for the quick campaign, including errors or success information",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the quick campaign result"
          },
          "error": {
            "type": "string",
            "description": "Any error message if the result was not found or failed"
          }
        },
        "required": ["id", "error"]
      }
    }
  },
  "required": ["success", "agency_id", "scheduled_tasks", "quick_campaign_results"]
      },
      "CallbackHistory": {
  "type": "object",
  "properties": {
    "total_count": {
      "type": "integer",
      "description": "Total number of records available"
    },
    "total_page": {
      "type": "integer",
      "description": "Total number of pages available for pagination"
    },
    "current_page_no": {
      "type": "integer",
      "description": "The current page number"
    },
    "next_page_number": {
      "type": "integer",
      "description": "The page number for the next page, or null if no more pages are available"
    },
    "previous_page_number": {
      "type": "integer",
      "description": "The page number for the previous page, or null if on the first page"
    },
    "page_size": {
      "type": "integer",
      "description": "The number of items per page"
    },
    "data": {
      "type": "array",
      "description": "List of campaign data objects",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the campaign"
          },
          "status": {
            "type": "string",
            "description": "The current status of the campaign (e.g., 'completed', 'paused')"
          },
          "name": {
            "type": "string",
            "description": "The name of the campaign"
          },
          "new_agent": {
            "type": "string",
            "description": "The name of the new agent assigned to the campaign"
          },
          "calling_number": {
            "type": "string",
            "description": "The phone number used for the campaign"
          },
          "direction": {
            "type": "string",
            "description": "The direction of the call, either 'Outbound' or 'Inbound'"
          },
          "status_choices": {
            "type": "array",
            "description": "Possible status choices for the campaign (e.g., 'dial_no_answer', 'agent_hangup')",
            "items": {
              "type": "string"
            }
          },
          "number_rotation": {
            "type": "boolean",
            "description": "Indicates whether number rotation is enabled"
          },
          "calling_number_pool": {
            "type": "array",
            "description": "A pool of numbers used for calling (if applicable)",
            "items": {
              "type": "string"
            }
          },
          "rotate_number_after_calls": {
            "type": "integer",
            "description": "The number of calls after which the calling number is rotated"
          },
          "release_buyed_when": {
            "type": "string",
            "description": "Condition for releasing the purchased number, e.g., 'subscription_complete'"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp for when the campaign was last updated"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp for when the campaign was created"
          }
        },
        "required": [
          "id",
          "status",
          "name",
          "new_agent",
          "calling_number",
          "direction",
          "status_choices",
          "number_rotation",
          "rotate_number_after_calls",
          "release_buyed_when",
          "updated_at",
          "created_at"
        ]
      }
    }
  },
  "required": [
    "total_count",
    "total_page",
    "current_page_no",
    "next_page_number",
    "previous_page_number",
    "page_size",
    "data"
  ]
      },
      "ContactList": {
  "type": "object",
  "properties": {
    "total_count": {
      "type": "integer",
      "description": "Total number of contacts available"
    },
    "total_page": {
      "type": "integer",
      "description": "Total number of pages for pagination"
    },
    "current_page_no": {
      "type": "integer",
      "description": "The current page number being viewed"
    },
    "next_page_number": {
      "type": ["integer", "null"],
      "description": "The next page number if available, otherwise null"
    },
    "previous_page_number": {
      "type": ["integer", "null"],
      "description": "The previous page number if available, otherwise null"
    },
    "page_size": {
      "type": "integer",
      "description": "The number of contacts per page"
    },
    "data": {
      "type": "array",
      "description": "List of contact objects for the current page",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique ID of the contact"
          },
          "contact_number": {
            "type": "string",
            "description": "Phone number of the contact"
          },
          "email": {
            "type": "string",
            "description": "Email address of the contact"
          },
          "first_name": {
            "type": ["string", "null"],
            "description": "First name of the contact"
          },
          "last_name": {
            "type": ["string", "null"],
            "description": "Last name of the contact"
          },
          "company_name": {
            "type": ["string", "null"],
            "description": "Company associated with the contact"
          },
          "industry": {
            "type": ["string", "null"],
            "description": "Industry the contact belongs to"
          },
          "custom1": {
            "type": ["string", "null"],
            "description": "Custom field 1"
          },
          "custom2": {
            "type": ["string", "null"],
            "description": "Custom field 2"
          },
          "custom3": {
            "type": ["string", "null"],
            "description": "Custom field 3"
          },
          "custom4": {
            "type": ["string", "null"],
            "description": "Custom field 4"
          },
          "isactive": {
            "type": "boolean",
            "description": "Indicates if the contact is active"
          },
          "address": {
            "type": ["string", "null"],
            "description": "Address of the contact"
          },
          "contact_id": {
            "type": ["string", "null"],
            "description": "External contact ID or integration ID"
          },
          "tags": {
            "type": "array",
            "description": "List of tags associated with the contact",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Unique ID of the tag"
                },
                "tag_name": {
                  "type": "string",
                  "description": "Name of the tag"
                }
              },
              "required": ["id", "tag_name"]
            }
          }
        },
        "required": ["id", "contact_number", "isactive", "tags"]
      }
    }
  },
  "required": [
    "total_count",
    "total_page",
    "current_page_no",
    "next_page_number",
    "previous_page_number",
    "page_size",
    "data"
  ]
      },
      "Tag":{
  "type": "object",
  "properties": {
    "id": {
      "type": "integer",
      "description": "Unique identifier of the tag",
      "example": 1
    },
    "tag_name": {
      "type": "string",
      "description": "Name of the tag",
      "example": "Test campaign"
    }
  },
  "required": ["id", "tag_name"]
      },
      "EditContactRequest": {
  "type": "object",
  "properties": {
    "first_name": {
      "type": "string",
      "description": "First name of the contact",
      "example": "test123Edit"
    },
    "last_name": {
      "type": "string",
      "description": "Last name of the contact",
      "example": "testEdit"
    },
    "contact_number": {
      "type": "string",
      "description": "Phone number of the contact (without country code)",
      "example": "8570904784"
    },
    "country_code": {
      "type": "string",
      "description": "Country code for the contact number (in international format)",
      "example": "+91"
    },
    "email": {
      "type": "string",
      "description": "Email address of the contact",
      "example": "info@agencys.ai"
    },
    "company_name": {
      "type": "string",
      "description": "Name of the company the contact is associated with",
      "example": "test"
    },
    "industry": {
      "type": "string",
      "description": "Industry type for the contact",
      "example": "SaaS"
    },
    "tags": {
      "type": "array",
      "description": "List of tag names associated with the contact",
      "items": {
        "type": "string"
      },
      "example": ["salesforce", "real estate", "Test campaign"]
    }
  },
  "required": [
    "first_name",
    "last_name",
    "contact_number",
    "country_code",
    "email",
    "tags"
  ]
      },
      "EditContact": {
  "type": "object",
  "properties": {
    "success": {
      "type": "boolean",
      "description": "Indicates whether the contact edit operation was successful",
      "example": true
    },
    "message": {
      "type": "string",
      "description": "A message describing the outcome of the request",
      "example": "Success"
    },
    "data": {
      "type": "object",
      "description": "The updated contact object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique ID of the contact",
          "example": 4465
        },
        "contact_number": {
          "type": "string",
          "description": "Phone number of the contact",
          "example": "+918570904784"
        },
        "email": {
          "type": "string",
          "description": "Email address of the contact",
          "example": "info@agencys.ai"
        },
        "first_name": {
          "type": "string",
          "description": "First name of the contact",
          "example": "test123edit"
        },
        "last_name": {
          "type": "string",
          "description": "Last name of the contact",
          "example": "testedit"
        },
        "company_name": {
          "type": "string",
          "description": "Company associated with the contact",
          "example": "test"
        },
        "industry": {
          "type": ["string", "null"],
          "description": "Industry the contact belongs to",
          "example": null
        },
        "custom1": {
          "type": ["string", "null"],
          "description": "Custom field 1",
          "example": null
        },
        "custom2": {
          "type": ["string", "null"],
          "description": "Custom field 2",
          "example": null
        },
        "custom3": {
          "type": ["string", "null"],
          "description": "Custom field 3",
          "example": null
        },
        "custom4": {
          "type": ["string", "null"],
          "description": "Custom field 4",
          "example": null
        },
        "isactive": {
          "type": "boolean",
          "description": "Indicates if the contact is active",
          "example": true
        },
        "address": {
          "type": ["string", "null"],
          "description": "Address of the contact",
          "example": null
        },
        "contact_id": {
          "type": ["string", "null"],
          "description": "External contact ID or integration ID",
          "example": "003au000008n5oiAAA"
        },
        "tags": {
          "type": "array",
          "description": "List of tags associated with the contact",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Unique ID of the tag",
                "example": 56
              },
              "tag_name": {
                "type": "string",
                "description": "Name of the tag",
                "example": "salesforce"
              }
            },
            "required": ["id", "tag_name"]
          }
        }
      },
      "required": [
        "id",
        "contact_number",
        "email",
        "first_name",
        "last_name",
        "company_name",
        "isactive",
        "contact_id",
        "tags"
      ]
    }
  },
  "required": ["success", "message", "data"]
      },
      "ContactProfileResponse": {
  "type": "object",
  "properties": {
    "success": {
      "type": "boolean",
      "example": true
    },
    "campaign_results": {
      "type": "array",
      "description": "List of campaign results associated with this contact",
      "items": {
        "type": "object"
      },
      "example": []
    },
    "quick_campaign_results": {
      "type": "array",
      "description": "List of quick campaign results associated with this contact",
      "items": {
        "type": "object"
      },
      "example": []
    }
  }
      },
      "BulkDeleteContactResponse": {
  "type": "object",
  "properties": {
    "success": {
      "type": "boolean",
      "description": "Indicates if the deletion was successful",
      "example": true
    },
    "message": {
      "type": "string",
      "description": "Descriptive message about the deletion outcome",
      "example": "Deleted 3 contacts"
    }
  }
      },
      "BulkCreateContactResponse": {
  "type": "object",
  "properties": {
    "message": {
      "type": "string",
      "example": "Bulk upload process started. Check status later."
    },
    "task_id": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Contacts uploaded successfully!"
        },
        "created": {
          "type": "integer",
          "description": "Number of new contacts created",
          "example": 0
        },
        "updated": {
          "type": "integer",
          "description": "Number of existing contacts updated",
          "example": 1
        },
        "failed_rows": {
          "type": "array",
          "description": "Rows that failed during the upload",
          "items": {
            "type": "object"
          },
          "example": []
        }
      }
    }
  }
},
"ImportCRMResponse": {
  "type": "object",
  "properties": {
    "task_id": {
      "type": "string",
      "description": "Unique task ID of the CRM import process",
      "example": "bac14e1c-b9ee-48a8-bbb1-311682f7ab93"
    },
    "status": {
      "type": "string",
      "description": "Status message of the import task",
      "example": "Import task has been started."
    }
  }
},
"SalesforceContactImportResponse": {
  "type": "object",
  "properties": {
    "respone": {
      "type": "object",
      "properties": {
        "total_imported": {
          "type": "integer",
          "description": "Total number of Salesforce contacts imported",
          "example": 0
        },
        "imported": {
          "type": "array",
          "description": "List of imported Salesforce contact entries",
          "items": {
            "type": "object"
          },
          "example": []
        }
      }
    }
  }
},
"SendContactsToCRMsResponse": {
  "type": "object",
  "properties": {
    "success": {
      "type": "boolean",
      "example": true
    },
    "errors": {
      "type": "array",
      "description": "List of any errors encountered during the task start",
      "items": {
        "type": "string"
      },
      "example": []
    },
    "response": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "description": "Status message of the task",
          "example": "Salesforce → GHL task started."
        }
      }
    },
    "message": {
      "type": "string",
      "description": "General message about the request",
      "example": "Export task has been started."
    }
  }
},
"CreateContactRequest": {
  "type": "object",
  "properties": {
    "id": { "type": "string", "example": "" },
    "first_name": { "type": "string", "example": "Amandeep (testingg)" },
    "last_name": { "type": "string", "example": "Singhh" },
    "contact_number": { "type": "string", "example": "+919999728776" },
    "email": { "type": "string", "example": "amanhxe@gmal.com" },
    "company_name": { "type": "string", "example": "softvel" },
    "industry": { "type": "string", "example": "IT" },
    "custom1": { "type": ["string", "null"], "example": null },
    "custom2": { "type": ["string", "null"], "example": null },
    "custom3": { "type": ["string", "null"], "example": null },
    "custom4": { "type": ["string", "null"], "example": null },
    "tags": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "tag_name": { "type": "string", "example": "agent_hangup" }
        },
        "required": ["tag_name"]
      }
    }
  },
  "required": ["first_name", "last_name", "contact_number"]
},
"CreateContactResponse": {
  "type": "object",
  "properties": {
    "success": {
      "type": "boolean",
      "example": true
    },
    "message": {
      "type": "string",
      "example": "Success"
    },
    "data": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "example": 4503 },
        "contact_number": { "type": "string", "example": "+919999728776" },
        "email": { "type": "string", "example": "amanhxe@gmal.com" },
        "first_name": { "type": "string", "example": "Amandeep (testingg)" },
        "last_name": { "type": "string", "example": "Singhh" },
        "company_name": { "type": "string", "example": "softvel" },
        "industry": { "type": "string", "example": "IT" },
        "custom1": { "type": ["string", "null"], "example": null },
        "custom2": { "type": ["string", "null"], "example": null },
        "custom3": { "type": ["string", "null"], "example": null },
        "custom4": { "type": ["string", "null"], "example": null },
        "isactive": { "type": "boolean", "example": true },
        "address": { "type": ["string", "null"], "example": null },
        "contact_id": { "type": ["string", "null"], "example": null },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": { "type": "integer", "example": 14 },
              "tag_name": { "type": "string", "example": "agent_hangup" }
            }
          }
        }
      }
    }
  }
},
"TwilioUserNumberRequest": {
  "type": "object",
  "properties": {
    "twilio_sid": {
      "type": "string",
      "description": "Twilio Account SID"
    },
    "auth_token": {
      "type": "string",
      "description": "Twilio Auth Token"
    }
  },
  "required": ["twilio_sid", "auth_token"]
},
"TwilioUserNumberResponse": {
  "type": "object",
  "properties": {
    "success": {
      "type": "boolean",
      "example": true
    },
    "message": {
      "type": "string",
      "example": "Data found"
    },
    "data": {
      "type": "object",
      "properties": {
        "numbers": {
          "type": "array",
          "description": "List of Twilio phone numbers",
          "items": {
            "type": "object",
            "properties": {
              "phone_number": {
                "type": "string",
                "example": "+16504498873"
              }
            }
          }
        }
      }
    }
  }
},
"TwilioNewNumberRequest": {
  "type": "object",
  "properties": {
    "twilio_sid": {
      "type": "string",
      "description": "Twilio Account SID"
    },
    "auth_token": {
      "type": "string",
      "description": "Twilio Auth Token"
    },
    "country": {
      "type": "string",
      "description": "Country code for phone number search (e.g., US, IN)",
      "example": "US"
    },
    "number_slice": {
      "type": "string",
      "description": "Substring of number to match (optional)",
      "example": ""
    },
    "number_slice_filter": {
      "type": "string",
      "description": "Where to apply number slice — can be 'first_part', 'middle_part', or 'last_part'",
      "example": "first_part"
    }
  },
  "required": ["twilio_sid", "auth_token", "country", "number_slice_filter"]
},
"TwilioNewNumberResponse": {
  "type": "object",
  "properties": {
    "success": {
      "type": "boolean",
      "example": true
    },
    "message": {
      "type": "string",
      "example": "Data found"
    },
    "data": {
      "type": "object",
      "properties": {
        "numbers": {
          "type": "array",
          "description": "List of available Twilio numbers",
          "items": {
            "type": "object",
            "properties": {
              "phone_number": {
                "type": "string"
              }
            }
          },
          "example": [
            { "phone_number": "+17755939489" },
            { "phone_number": "+19034209780" }
          ]
        }
      }
    }
  }
},
"TwilioFetchCallerIDsRequest": {
  "type": "object",
  "properties": {
    "account_sid": {
      "type": "string",
      "description": "Twilio Account SID"
    },
    "auth_token": {
      "type": "string",
      "description": "Twilio Auth Token"
    }
  },
  "required": ["account_sid", "auth_token"]
},
"TwilioFetchCallerIDsResponse": {
  "type": "object",
  "properties": {
    "caller_ids": {
      "type": "array",
      "description": "List of verified caller IDs from Twilio",
      "items": {
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "string",
            "description": "The verified Twilio phone number",
            "example": "+919821985448"
          },
          "friendly_name": {
            "type": "string",
            "description": "The friendly name set for the number",
            "example": "abc"
          },
          "sid": {
            "type": "string",
            "description": "The SID of the verified caller ID"
          }
        }
      },
      "example": [
        {
          "phone_number": "+919821985448",
          "friendly_name": "avc"
        },
        {
          "phone_number": "+918570904784",
          "friendly_name": "jkl"
        }
      ]
    }
  }
},
"TwilioContactListResponse": {
  "type": "object",
  "properties": {
    "success": {
      "type": "boolean",
      "example": true
    },
    "message": {
      "type": "string",
      "example": "contact data"
    },
    "data": {
      "type": "array",
      "description": "List of Twilio contact numbers",
      "items": {
        "type": "object",
        "properties": {
          "pk": {
            "type": "integer",
            "description": "Primary key or unique ID of the contact",
            "example": 60
          },
          "phone_number": {
            "type": "string",
            "description": "The Twilio phone number"
          },
          "nickname": {
            "type": "string",
            "description": "A friendly name or label for the number",
            "example": "test"
          },
          "source_of_origin": {
            "type": ["string", "null"],
            "description": "Where the contact originated from",
            "example": null
          },
          "phone_number_sid": {
            "type": ["string", "null"],
            "description": "The Twilio SID associated with the number",
            "example": null
          },
          "verification_status": {
            "type": ["string", "null"],
            "description": "Verification status of the number",
            "example": null
          },
          "in_used_by_agent": {
            "type": "string",
            "description": "Agent currently using this number (if any)",
            "example": "none"
          }
        }
      }
    }
  }
},
"StartVerificationRequest": {
  "type": "object",
  "required": ["phone_number", "friendly_name", "sid", "auth"],
  "properties": {
    "phone_number": {
      "type": "string",
      "description": "Phone number to be verified",
      "example": "+919999008776"
    },
    "friendly_name": {
      "type": "string",
      "description": "Label to identify the phone number",
      "example": "TEST"
    },
    "sid": {
      "type": "string",
      "description": "Twilio Account SID"
    },
    "auth": {
      "type": "string",
      "description": "Twilio Auth Token"
    }
  }
},
"StartVerificationResponse": {
  "type": "object",
  "properties": {
    "sid": {
      "type": "integer",
      "description": "Internal system ID for the verification task",
      "example": 99
    },
    "phone_number": {
      "type": "string",
      "description": "Phone number that was verified",
      "example": "+919999008776"
    },
    "validation_code": {
      "type": "string",
      "description": "The generated code for caller ID validation",
      "example": "838171"
    },
    "call_sid": {
      "type": "string",
      "description": "Twilio call SID generated for the verification process"
    }
  }
},
"VerificationStatusResponse": {
  "type": "object",
  "properties": {
    "phone_number": {
      "type": "string",
      "description": "The phone number being verified",
      "example": "+919999008776"
    },
    "validation_code": {
      "type": "string",
      "description": "The Twilio validation code sent to verify the phone number",
      "example": "838171"
    },
    "twilio_sid": {
      "type": ["string", "null"],
      "description": "Twilio SID associated with the phone number if available",
      "example": null
    },
    "is_verified": {
      "type": "boolean",
      "description": "Indicates whether the phone number is verified",
      "example": false
    },
    "created_at": {
      "type": "string",
      "format": "date-time",
      "description": "Timestamp of when the verification process started",
      "example": "2025-08-26T09:22:32.928114Z"
    },
    "friendly_name": {
      "type": ["string", "null"],
      "description": "A user-defined name for the phone number",
      "example": null
    }
  }
},
"DeleteTwilioContactResponse": {
  "type": "object",
  "properties": {
    "success": {
      "type": "boolean",
      "example": true,
      "description": "Indicates whether the deletion was successful"
    },
    "message": {
      "type": "string",
      "example": "Deleted successfully",
      "description": "Result message"
    }
  }
},
"GHLConnectUserRequest": {
  "type": "object",
  "properties": {
    "code": {
      "type": "string",
      "description": "Authorization code returned from GHL",
      "example": "a"
    },
    "state": {
      "type": "string",
      "description": "State value returned from GHL",
      "example": "a"
    }
  },
  "required": ["code", "state"]
},
"GHLConnectUserResponse": {
  "type": "object",
  "properties": {
    "success": {
      "type": "boolean",
      "example": true
    },
    "message": {
      "type": "string",
      "example": "User successfully connected to GHL"
    }
  }
},
"AgencyAPIKeyResponse": {
  "type": "object",
  "properties": {
    "success": {
      "type": "boolean",
      "example": true
    },
    "message": {
      "type": "string",
      "example": "data found"
    },
    "data": {
      "type": "object",
      "properties": {
        "agency_key": {
          "type": "string"
        }
      }
    }
  }
},
"SalesforceCallbackRequest": {
  "type": "object",
  "properties": {
    "code": {
      "type": "string",
      "description": "Authorization code returned from Salesforce",
      "example": "a"
    },
    "state": {
      "type": "string",
      "description": "State value returned from Salesforce",
      "example": "a"
    }
  },
  "required": ["code", "state"]
},
"SalesforceCallbackResponse": {
  "type": "object",
  "properties": {
    "success": {
      "type": "boolean",
      "example": true
    },
    "message": {
      "type": "string",
      "example": "User successfully connected to Salesforce"
    }
  }
},
"SnowieCallbackRequest": {
  "type": "object",
  "properties": {
    "code": {
      "type": "string",
      "description": "Authorization code returned from Snowie",
      "example": "abc123"
    }
  },
  "required": ["code"]
},
"SnowieCallbackResponse": {
  "type": "object",
  "properties": {
    "success": {
      "type": "boolean",
      "example": true
    },
    "message": {
      "type": "string",
      "example": "User successfully connected to Snowie"
    }
  }
},
"RegisterWebhookRequest": {
  "type": "object",
  "properties": {
    "webhook_url": {
      "type": "string",
      "format": "uri",
      "description": "URL to send webhook payloads to",
      "example": "https://webhook.site/abcdef123456"
    },
    "description": {
      "type": "string",
      "description": "Description of the webhook purpose",
      "example": "This is a test webhook to capture call start and end events."
    },
    "agent_ids": {
      "type": "array",
      "description": "List of agent IDs this webhook is associated with",
      "items": {
        "type": "string",
        "example": "549"
      }
    },
    "events_to_subscribe": {
      "type": "array",
      "description": "List of events to subscribe to (e.g. call.started, call.ended)",
      "items": {
        "type": "string",
        "example": "call.started"
      }
    }
  },
  "required": ["webhook_url", "description", "agent_ids", "events_to_subscribe"]
},
"RegisterWebhookResponse": {
  "type": "object",
  "properties": {
    "message": {
      "type": "string",
      "example": "Webhook registered successfully!"
    },
    "data": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 25
        },
        "webhook_url": {
          "type": "string",
          "example": "https://webhook.site/abcdef123456"
        },
        "description": {
          "type": "string",
          "example": "This is a test webhook to capture call start and end events."
        },
        "agents": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 549
              },
              "agent_name": {
                "type": "string",
                "example": "vinay dan 2"
              }
            }
          }
        },
        "events_to_subscribe": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "call.started"
          }
        }
      }
    }
  }
},
"EditWebhookRequest": {
  "type": "object",
  "properties": {
    "webhook_url": {
      "type": "string",
      "format": "uri",
      "description": "The updated URL where webhook events will be sent",
      "example": "https://webhook.site/abcdefgh123456789"
    },
    "description": {
      "type": "string",
      "description": "Updated description of the webhook",
      "example": "This edited is a test webhook to capture call start and end events."
    },
    "agent_ids": {
      "type": "array",
      "description": "List of agent IDs this webhook is associated with",
      "items": {
        "type": "string",
        "example": "570"
      }
    },
    "events_to_subscribe": {
      "type": "array",
      "description": "Events to subscribe to (e.g., call.started, call.ended)",
      "items": {
        "type": "string",
        "example": "call.started"
      }
    }
  },
  "required": ["webhook_url", "description", "agent_ids", "events_to_subscribe"]
},
"EditWebhookResponse": {
  "type": "object",
  "properties": {
    "message": {
      "type": "string",
      "example": "Webhook updated successfully!"
    },
    "data": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 25
        },
        "webhook_url": {
          "type": "string",
          "example": "https://webhook.site/abcdefgh123456789"
        },
        "description": {
          "type": "string",
          "example": "This edited is a test webhook to capture call start and end events."
        },
        "agents": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 570
              },
              "agent_name": {
                "type": "string",
                "example": "dan 3"
              }
            }
          }
        },
        "events_to_subscribe": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "call.started"
          }
        }
      }
    }
  }
},
"DeleteWebhookResponse": {
  "type": "object",
  "properties": {
    "message": {
      "type": "string",
      "example": "Webhook deleted successfully"
    }
  }
},
"GetWebhookListResponse": {
  "type": "object",
  "properties": {
    "message": {
      "type": "string",
      "example": "Webhook list retrieved successfully!"
    },
    "data": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 3
          },
          "webhook_url": {
            "type": "string",
            "example": "https://services.leadconnectorhq.com/hooks/DHubtJyGmvUTtbYB7aEL/webhook-trigger/1a499911-ce93-4451-ba41-d64dea7b6d4e"
          },
          "description": {
            "type": "string",
            "example": "prio"
          },
          "agents": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 16
                },
                "agent_name": {
                  "type": "string",
                  "example": "inbound prio agent"
                }
              }
            }
          },
          "events_to_subscribe": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "call.started"
            }
          }
        }
      }
    }
  }
},
"ActiveWebhookStatsResponse": {
  "type": "object",
  "properties": {
    "active_webhooks_count": {
      "type": "integer",
      "example": 16,
      "description": "Total number of active webhooks"
    },
    "average_response_time": {
      "type": "number",
      "format": "float",
      "example": 938.430755498023,
      "description": "Average response time (in milliseconds) for the active webhooks"
    },
    "total_hit_count": {
      "type": "integer",
      "example": 179,
      "description": "Total number of times all webhooks have been triggered"
    }
  }
},
"ListAllAgentsResponse": {
  "type": "object",
  "properties": {
    "total_count": {
      "type": "integer",
      "example": 559
    },
    "data": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "pk": { "type": "integer", "example": 571 },
          "agent_name": { "type": "string", "example": "add_agent_name" },
          "agent_id": { "type": "string", "example": "agent_77f109e0965c6947df907591b3" },
          "voice_id": { "type": "string", "example": "openai-Shimmer" },
          "language": { "type": "string", "example": "en-US" },
          "interruption_sensitivity": { "type": "string", "example": "1.0" },
          "voicemail": { "type": "boolean", "example": true },
          "voicemail_message": { "type": ["string", "null"], "example": null },
          "end_call_after_silence": { "type": "integer", "example": 10 },
          "max_call_duration": { "type": "integer", "example": 10 },
          "reminder_trigger": { "type": "integer", "example": 10 },
          "ambient_sound": { "type": ["string", "null"], "example": null },
          "analysis_data": { "type": "array", "items": {} },
          "llm": { "type": "integer", "example": 577 },
          "voice_speed": { "type": "number", "example": 1.0 },
          "voice_temperature": { "type": "number", "example": 1.0 },
          "volume": { "type": "number", "example": 1.0 },
          "enable_backchannel": { "type": "boolean", "example": true },
          "normalize_for_speech": { "type": "boolean", "example": false },
          "enable_transcription_formatting": { "type": "boolean", "example": true },
          "reminder_trigger_ms": { "type": "integer", "example": 10000 },
          "reminder_max_count": { "type": "integer", "example": 1 },
          "boosted_keywords": { "type": "array", "items": {} },
          "ambient_sound_volume": { "type": "number", "example": 1.0 },
          "voicemail_detection_timeout_ms": { "type": "integer", "example": 5000 },
          "begin_message_delay_ms": { "type": "integer", "example": 0 },
          "updated_at": { "type": "string", "format": "date-time", "example": "2025-08-26T11:41:37.296105Z" },
          "is_locked": { "type": "boolean", "example": false },
          "calendar_id": { "type": ["string", "null"], "example": null },
          "inbound_appoitment": { "type": "boolean", "example": false },
          "ring_duration_sec": { "type": "integer", "example": 30 },
          "stt_mode": { "type": "string", "example": "fast" },
          "backchannel_words": { "type": ["string", "null"], "example": null },
          "backchannel_frequency": { "type": "number", "example": 0.8 },
          "call_scheduling": { "type": "boolean", "example": false },
          "agent_crm_type": { "type": ["string", "null"], "example": null },
          "voicemail_option": {
            "type": "object",
            "properties": {
              "action": {
                "type": "object",
                "properties": {
                  "type": { "type": "string", "example": "hangup" }
                }
              }
            }
          },
          "agent_type": { "type": "string", "example": "legacy" },
          "responsiveness": { "type": "number", "example": 1.0 },
          "pronunciation_dictionary": { "type": ["string", "null"], "example": null },
          "vocab_specialization": { "type": "string", "example": "general" },
          "user_dtmf_options": { "type": "object" },
          "denoising_mode": { "type": "string", "example": "noise-cancellation" },
          "allow_user_dtmf": { "type": "boolean", "example": true },
          "llm_detail": {
            "type": "object",
            "properties": {
              "llm_id": { "type": "string", "example": "llm_b47e623ae3d8110e6a05241a9799" },
              "model": { "type": ["string", "null"], "example": null },
              "s2s_model": { "type": "string", "example": "gpt-4o-mini-realtime" }
            }
          },
          "is_active": { "type": "boolean", "example": false }
        }
      }
    }
  }
},
"TelnyxRegisterNumberRequest": {
  "type": "object",
  "required": ["phone_number", "friendly_name", "country_code"],
  "properties": {
    "phone_number": {
      "type": "string",
      "example": "+12183009429",
      "description": "Phone number to register"
    },
    "friendly_name": {
      "type": "string",
      "example": "testing6",
      "description": "Custom label for the number"
    },
    "country_code": {
      "type": "string",
      "example": "US",
      "description": "Country code of the number"
    }
  }
},
"TelnyxRegisterNumberResponse": {
  "type": "object",
  "properties": {
    "message": {
      "type": "string",
      "example": "Number registered successfully"
    }
  }
},
"TelnyxCombinedNumbersResponse": {
  "type": "object",
  "properties": {
    "purchased_numbers": {
      "type": "array",
      "description": "List of already purchased Telnyx numbers",
      "items": {
        "type": "string",
        "example": "+12183009429"
      }
    },
    "available_numbers": {
      "type": "array",
      "description": "List of available Telnyx numbers for purchase",
      "items": {
        "type": "string",
        "example": "+12702035492"
      }
    },
    "is_masked": {
      "type": "boolean",
      "description": "Indicates if numbers are partially masked for security or preview",
      "example": false
    }
  }
},
"TwilioBuyNumberRequest": {
    "type": "object",
    "required": [
      "twilio_sid",
      "auth_token",
      "phone_number",
      "friendly_name",
      "new_number"
    ],
    "properties": {
      "twilio_sid": {
        "type": "string",
        "description": "Twilio account SID used to authenticate."
      },
      "auth_token": {
        "type": "string",
        "description": "Twilio Auth Token for the given SID."
      },
      "phone_number": {
        "type": "string",
        "description": "The Twilio phone number to be purchased.",
        "example": "+12154346029"
      },
      "friendly_name": {
        "type": "string",
        "description": "Custom nickname for the phone number.",
        "example": "ttesting"
      },
      "new_number": {
        "type": "boolean",
        "description": "Flag indicating if a new number is being purchased."
      }
    }
  },
  "TwilioBuyNumberResponse": {
    "type": "object",
    "properties": {
      "success": {
        "type": "boolean",
        "example": true
      },
      "message": {
        "type": "string",
        "example": "contact number added"
      },
      "data": {
        "type": "object",
        "description": "Contains additional data if any"
      }
    }
  },
  "TwilioRegisterRequest": {
  "type": "object",
  "required": ["twilio_sid", "twilio_token"],
  "properties": {
    "twilio_sid": {
      "type": "string",
      "description": "Twilio Account SID"
    },
    "twilio_token": {
      "type": "string",
      "description": "Twilio Auth Token"
    }
  }
},
"TwilioRegisterResponse": {
  "type": "object",
  "properties": {
    "success": {
      "type": "boolean",
      "example": true
    },
    "message": {
      "type": "string",
      "example": "twilio sid and twilio token updated sucessfully"
    },
    "data": {
      "type": "object",
      "example": {}
    }
  }
},
"TwilioRegisterGetResponse": {
  "type": "object",
  "properties": {
    "success": {
      "type": "boolean",
      "example": true
    },
    "message": {
      "type": "string",
      "example": "twilio sid and twilio token updated"
    },
    "data": {
  "type": "object",
  "properties": {
    "company_name": {
      "type": "string",
      "example": "your-company-name"
    },
    "twilio_sid": {
      "type": "string"
    },
    "twilio_token": {
      "type": "string",
      "example": "your_auth_token_here"
    },
    "twilio_buy_hide": {
      "type": "boolean",
      "example": false
    },
    "twilio_available_hide": {
      "type": "boolean",
      "example": false
    }
  }
}

  }
},
"CustomAddContactRequest": {
  "type": "object",
  "required": [
    "phone_number",
    "termination_uri",
    "sip_trunk_auth_username",
    "sip_trunk_auth_password",
    "nickname",
    "source_of_origin"
  ],
  "properties": {
    "phone_number": {
      "type": "string",
      "description": "The phone number to register",
      "example": "+917418520030"
    },
    "termination_uri": {
      "type": "string",
      "description": "The SIP termination URI (used for routing)",
      "example": "popuptesting"
    },
    "sip_trunk_auth_username": {
      "type": "string",
      "description": "SIP trunk authentication username",
      "example": "kadpro@gmail.com"
    },
    "sip_trunk_auth_password": {
      "type": "string",
      "description": "SIP trunk authentication password",
      "example": "2345$"
    },
    "nickname": {
      "type": "string",
      "description": "A friendly name or nickname for the number",
      "example": "testingg"
    },
    "source_of_origin": {
      "type": "string",
      "description": "The source from which the contact originates",
      "example": "custom"
    }
  }
},
"CustomAddContactResponse": {
  "type": "object",
  "properties": {
    "success": {
      "type": "boolean",
      "example": true
    },
    "message": {
      "type": "string",
      "example": "contact created"
    },
    "data": {
      "type": "object",
      "properties": {
        "pk": {
          "type": "integer",
          "example": 68
        },
        "phone_number": {
          "type": "string",
          "example": "+917418963066"
        },
        "termination_uri": {
          "type": "string",
          "example": "popuptesting"
        },
        "sip_trunk_auth_username": {
          "type": "string",
          "example": "kadpro@gmail.com"
        },
        "sip_trunk_auth_password": {
          "type": "string",
          "example": "345$"
        },
        "nickname": {
          "type": "string",
          "example": "testingg"
        },
        "source_of_origin": {
          "type": "string",
          "example": "custom"
        },
        "phone_number_sid": {
          "type": ["string", "null"],
          "example": null
        },
        "verification_status": {
          "type": ["string", "null"],
          "example": null
        },
        "in_used_by_agent": {
          "type": "string",
          "example": "none"
        },
        "is_auto_buyed": {
          "type": "boolean",
          "example": false
        }
      }
    }
  }
},
"TelnyxRegisterRequest": {
  "type": "object",
  "required": ["telnyx_api_key"],
  "properties": {
    "telnyx_api_key": {
      "type": "string",
      "description": "Your Telnyx API key used for authentication"
    }
  }
},
"TelnyxRegisterResponse": {
  "type": "object",
  "properties": {
    "success": {
      "type": "boolean",
      "example": false
    },
    "errors": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "example": []
    },
    "response": {
      "type": "string",
      "description": "Response content, such as the company name",
      "example": "voizerfreeaccount"
    },
    "message": {
      "type": "string",
      "description": "Response message",
      "example": "Telnyx API key updated successfully"
    }
  }
},
"TelnyxRegisterGetResponse": {
  "type": "object",
  "properties": {
    "data": {
      "type": "string",
      "description": "The registered Telnyx API key"
    },
    "telnyx_buy_hide": {
      "type": "boolean",
      "description": "UI visibility flag for buying Telnyx numbers",
      "example": false
    },
    "telynx_available_hide": {
      "type": "boolean",
      "description": "UI visibility flag for available Telnyx numbers",
      "example": false
    }
  }
},
"TelnyxBuyCallerIDRequest": {
  "type": "object",
  "required": ["phone_number", "friendly_name"],
  "properties": {
    "phone_number": {
      "type": "string",
      "description": "The phone number to be used as caller ID."
    },
    "friendly_name": {
      "type": "string",
      "description": "A custom name or label for the number.",
      "example": "TEST"
    }
  }
},
"TelnyxBuyCallerIDResponse": {
  "type": "object",
  "properties": {
    "success": {
      "type": "boolean",
      "example": true
    },
    "message": {
      "type": "string",
      "example": "Caller ID saved successfully"
    },
    "data": {
      "type": "object",
      "properties": {
        "phone_number": {
          "type": "string"
        },
        "termination_uri": {
          "type": "string"
        },
        "sip_trunk_auth_username": {
          "type": "string"
        },
        "sip_trunk_auth_password": {
          "type": "string"
        },
        "nickname": {
          "type": "string"
        }
      }
    }
  }
},























































































      "Error": {
        "required": [
          "error",
          "message"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}


